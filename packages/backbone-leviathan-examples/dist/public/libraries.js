"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t,e=(t=require("jquery"))&&"object"==typeof t&&"default"in t?t.default:t,n="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||Function("return this")()||{},r=Array.prototype,i=Object.prototype,s="undefined"!=typeof Symbol?Symbol.prototype:null,o=r.push,a=r.slice,u=i.toString,c=i.hasOwnProperty,l=Array.isArray,h=Object.keys,f=Object.create,d=n.isNaN,p=n.isFinite,v=function(){};function g(t){return t instanceof g?t:this instanceof g?void(this._wrapped=t):new g(t)}var m=g.VERSION="1.10.2";function y(t,e,n){if(void 0===e)return t;switch(null==n?3:n){case 1:return function(n){return t.call(e,n)};case 3:return function(n,r,i){return t.call(e,n,r,i)};case 4:return function(n,r,i,s){return t.call(e,n,r,i,s)}}return function(){return t.apply(e,arguments)}}function _(t,e,n){return null==t?Ce:_e(t)?y(t,e,n):me(t)&&!ge(t)?qe(t):Ue(t)}function b(t,e){return _(t,e,1/0)}function x(t,e,n){return g.iteratee!==b?g.iteratee(t,e):_(t,e,n)}function w(t,e){return e=null==e?t.length-1:+e,function(){for(var n=Math.max(arguments.length-e,0),r=Array(n),i=0;i<n;i++)r[i]=arguments[i+e];switch(e){case 0:return t.call(this,r);case 1:return t.call(this,arguments[0],r);case 2:return t.call(this,arguments[0],arguments[1],r)}var s=Array(e+1);for(i=0;i<e;i++)s[i]=arguments[i];return s[e]=r,t.apply(this,s)}}function E(t){if(!me(t))return{};if(f)return f(t);v.prototype=t;var e=new v;return v.prototype=null,e}function S(t){return function(e){return null==e?void 0:e[t]}}function j(t,e){return null!=t&&c.call(t,e)}function k(t,e){for(var n=e.length,r=0;r<n;r++){if(null==t)return;t=t[e[r]]}return n?t:void 0}g.iteratee=b;var I=Math.pow(2,53)-1,A=S("length");function O(t){var e=A(t);return"number"==typeof e&&e>=0&&e<=I}function M(t,e,n){var r,i;if(e=y(e,n),O(t))for(r=0,i=t.length;r<i;r++)e(t[r],r,t);else{var s=Dt(t);for(r=0,i=s.length;r<i;r++)e(t[s[r]],s[r],t)}return t}function T(t,e,n){e=x(e,n);for(var r=!O(t)&&Dt(t),i=(r||t).length,s=Array(i),o=0;o<i;o++){var a=r?r[o]:o;s[o]=e(t[a],a,t)}return s}function N(t){var e=function(e,n,r,i){var s=!O(e)&&Dt(e),o=(s||e).length,a=t>0?0:o-1;for(i||(r=e[s?s[a]:a],a+=t);a>=0&&a<o;a+=t){var u=s?s[a]:a;r=n(r,e[u],u,e)}return r};return function(t,n,r,i){var s=arguments.length>=3;return e(t,y(n,i,4),r,s)}}var R=N(1),P=N(-1);function H(t,e,n){var r=(O(t)?bt:ne)(t,e,n);if(void 0!==r&&-1!==r)return t[r]}function $(t,e,n){var r=[];return e=x(e,n),M(t,(function(t,n,i){e(t,n,i)&&r.push(t)})),r}function C(t,e,n){return $(t,zt(x(e)),n)}function z(t,e,n){e=x(e,n);for(var r=!O(t)&&Dt(t),i=(r||t).length,s=0;s<i;s++){var o=r?r[s]:s;if(!e(t[o],o,t))return!1}return!0}function F(t,e,n){e=x(e,n);for(var r=!O(t)&&Dt(t),i=(r||t).length,s=0;s<i;s++){var o=r?r[s]:s;if(e(t[o],o,t))return!0}return!1}function U(t,e,n,r){return O(t)||(t=Kt(t)),("number"!=typeof n||r)&&(n=0),St(t,e,n)>=0}var B=w((function(t,e,n){var r,i;return _e(e)?i=e:ge(e)&&(r=e.slice(0,-1),e=e[e.length-1]),T(t,(function(t){var s=i;if(!s){if(r&&r.length&&(t=k(t,r)),null==t)return;s=t[e]}return null==s?s:s.apply(t,n)}))}));function q(t,e){return T(t,Ue(e))}function L(t,e){return $(t,qe(e))}function J(t,e){return H(t,qe(e))}function W(t,e,n){var r,i,s=-1/0,o=-1/0;if(null==e||"number"==typeof e&&"object"!=typeof t[0]&&null!=t)for(var a=0,u=(t=O(t)?t:Kt(t)).length;a<u;a++)null!=(r=t[a])&&r>s&&(s=r);else e=x(e,n),M(t,(function(t,n,r){((i=e(t,n,r))>o||i===-1/0&&s===-1/0)&&(s=t,o=i)}));return s}function D(t,e,n){var r,i,s=1/0,o=1/0;if(null==e||"number"==typeof e&&"object"!=typeof t[0]&&null!=t)for(var a=0,u=(t=O(t)?t:Kt(t)).length;a<u;a++)null!=(r=t[a])&&r<s&&(s=r);else e=x(e,n),M(t,(function(t,n,r){((i=e(t,n,r))<o||i===1/0&&s===1/0)&&(s=t,o=i)}));return s}function V(t){return K(t,1/0)}function K(t,e,n){if(null==e||n)return O(t)||(t=Kt(t)),t[Je(t.length-1)];var r=O(t)?ue(t):Kt(t),i=A(r);e=Math.max(Math.min(e,i),0);for(var s=i-1,o=0;o<e;o++){var a=Je(o,s),u=r[o];r[o]=r[a],r[a]=u}return r.slice(0,e)}function G(t,e,n){var r=0;return e=x(e,n),q(T(t,(function(t,n,i){return{value:t,index:r++,criteria:e(t,n,i)}})).sort((function(t,e){var n=t.criteria,r=e.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(n<r||void 0===r)return-1}return t.index-e.index})),"value")}function X(t,e){return function(n,r,i){var s=e?[[],[]]:{};return r=x(r,i),M(n,(function(e,i){var o=r(e,i,n);t(s,e,o)})),s}}var Q=X((function(t,e,n){j(t,n)?t[n].push(e):t[n]=[e]})),Y=X((function(t,e,n){t[n]=e})),Z=X((function(t,e,n){j(t,n)?t[n]++:t[n]=1})),tt=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function et(t){return t?ge(t)?a.call(t):be(t)?t.match(tt):O(t)?T(t,Ce):Kt(t):[]}function nt(t){return null==t?0:O(t)?t.length:Dt(t).length}var rt=X((function(t,e,n){t[n?0:1].push(e)}),!0);function it(t,e,n){return null==t||t.length<1?null==e?void 0:[]:null==e||n?t[0]:st(t,t.length-e)}function st(t,e,n){return a.call(t,0,Math.max(0,t.length-(null==e||n?1:e)))}function ot(t,e,n){return null==t||t.length<1?null==e?void 0:[]:null==e||n?t[t.length-1]:at(t,Math.max(0,t.length-e))}function at(t,e,n){return a.call(t,null==e||n?1:e)}function ut(t){return $(t,Boolean)}function ct(t,e,n,r){for(var i=(r=r||[]).length,s=0,o=A(t);s<o;s++){var a=t[s];if(O(a)&&(ge(a)||ye(a)))if(e)for(var u=0,c=a.length;u<c;)r[i++]=a[u++];else ct(a,e,n,r),i=r.length;else n||(r[i++]=a)}return r}function lt(t,e){return ct(t,e,!1)}var ht=w((function(t,e){return vt(t,e)}));function ft(t,e,n,r){Re(e)||(r=n,n=e,e=!1),null!=n&&(n=x(n,r));for(var i=[],s=[],o=0,a=A(t);o<a;o++){var u=t[o],c=n?n(u,o,t):u;e&&!n?(o&&s===c||i.push(u),s=c):n?U(s,c)||(s.push(c),i.push(u)):U(i,u)||i.push(u)}return i}var dt=w((function(t){return ft(ct(t,!0,!0))}));function pt(t){for(var e=[],n=arguments.length,r=0,i=A(t);r<i;r++){var s=t[r];if(!U(e,s)){var o;for(o=1;o<n&&U(arguments[o],s);o++);o===n&&e.push(s)}}return e}var vt=w((function(t,e){return e=ct(e,!0,!0),$(t,(function(t){return!U(e,t)}))}));function gt(t){for(var e=t&&W(t,A).length||0,n=Array(e),r=0;r<e;r++)n[r]=q(t,r);return n}var mt=w(gt);function yt(t,e){for(var n={},r=0,i=A(t);r<i;r++)e?n[t[r]]=e[r]:n[t[r][0]]=t[r][1];return n}function _t(t){return function(e,n,r){n=x(n,r);for(var i=A(e),s=t>0?0:i-1;s>=0&&s<i;s+=t)if(n(e[s],s,e))return s;return-1}}var bt=_t(1),xt=_t(-1);function wt(t,e,n,r){for(var i=(n=x(n,r,1))(e),s=0,o=A(t);s<o;){var a=Math.floor((s+o)/2);n(t[a])<i?s=a+1:o=a}return s}function Et(t,e,n){return function(r,i,s){var o=0,u=A(r);if("number"==typeof s)t>0?o=s>=0?s:Math.max(s+u,o):u=s>=0?Math.min(s+1,u):s+u+1;else if(n&&s&&u)return r[s=n(r,i)]===i?s:-1;if(i!=i)return(s=e(a.call(r,o,u),Ne))>=0?s+o:-1;for(s=t>0?o:u-1;s>=0&&s<u;s+=t)if(r[s]===i)return s;return-1}}var St=Et(1,bt,wt),jt=Et(-1,xt);function kt(t,e,n){null==e&&(e=t||0,t=0),n||(n=e<t?-1:1);for(var r=Math.max(Math.ceil((e-t)/n),0),i=Array(r),s=0;s<r;s++,t+=n)i[s]=t;return i}function It(t,e){if(null==e||e<1)return[];for(var n=[],r=0,i=t.length;r<i;)n.push(a.call(t,r,r+=e));return n}function At(t,e,n,r,i){if(!(r instanceof e))return t.apply(n,i);var s=E(t.prototype),o=t.apply(s,i);return me(o)?o:s}var Ot=w((function(t,e,n){if(!_e(t))throw new TypeError("Bind must be called on a function");var r=w((function(i){return At(t,r,e,this,n.concat(i))}));return r})),Mt=w((function(t,e){var n=Mt.placeholder,r=function(){for(var i=0,s=e.length,o=Array(s),a=0;a<s;a++)o[a]=e[a]===n?arguments[i++]:e[a];for(;i<arguments.length;)o.push(arguments[i++]);return At(t,r,this,this,o)};return r}));Mt.placeholder=g;var Tt=w((function(t,e){var n=(e=ct(e,!1,!1)).length;if(n<1)throw new Error("bindAll must be passed function names");for(;n--;){var r=e[n];t[r]=Ot(t[r],t)}}));function Nt(t,e){var n=function(r){var i=n.cache,s=""+(e?e.apply(this,arguments):r);return j(i,s)||(i[s]=t.apply(this,arguments)),i[s]};return n.cache={},n}var Rt=w((function(t,e,n){return setTimeout((function(){return t.apply(null,n)}),e)})),Pt=Mt(Rt,g,1);function Ht(t,e,n){var r,i,s,o,a=0;n||(n={});var u=function(){a=!1===n.leading?0:We(),r=null,o=t.apply(i,s),r||(i=s=null)},c=function(){var c=We();a||!1!==n.leading||(a=c);var l=e-(c-a);return i=this,s=arguments,l<=0||l>e?(r&&(clearTimeout(r),r=null),a=c,o=t.apply(i,s),r||(i=s=null)):r||!1===n.trailing||(r=setTimeout(u,l)),o};return c.cancel=function(){clearTimeout(r),a=0,r=i=s=null},c}function $t(t,e,n){var r,i,s=function(e,n){r=null,n&&(i=t.apply(e,n))},o=w((function(o){if(r&&clearTimeout(r),n){var a=!r;r=setTimeout(s,e),a&&(i=t.apply(this,o))}else r=Rt(s,e,this,o);return i}));return o.cancel=function(){clearTimeout(r),r=null},o}function Ct(t,e){return Mt(e,t)}function zt(t){return function(){return!t.apply(this,arguments)}}function Ft(){var t=arguments,e=t.length-1;return function(){for(var n=e,r=t[e].apply(this,arguments);n--;)r=t[n].call(this,r);return r}}function Ut(t,e){return function(){if(--t<1)return e.apply(this,arguments)}}function Bt(t,e){var n;return function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=null),n}}var qt=Mt(Bt,2),Lt=!{toString:null}.propertyIsEnumerable("toString"),Jt=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];function Wt(t,e){var n=Jt.length,r=t.constructor,s=_e(r)&&r.prototype||i,o="constructor";for(j(t,o)&&!U(e,o)&&e.push(o);n--;)(o=Jt[n])in t&&t[o]!==s[o]&&!U(e,o)&&e.push(o)}function Dt(t){if(!me(t))return[];if(h)return h(t);var e=[];for(var n in t)j(t,n)&&e.push(n);return Lt&&Wt(t,e),e}function Vt(t){if(!me(t))return[];var e=[];for(var n in t)e.push(n);return Lt&&Wt(t,e),e}function Kt(t){for(var e=Dt(t),n=e.length,r=Array(n),i=0;i<n;i++)r[i]=t[e[i]];return r}function Gt(t,e,n){e=x(e,n);for(var r=Dt(t),i=r.length,s={},o=0;o<i;o++){var a=r[o];s[a]=e(t[a],a,t)}return s}function Xt(t){for(var e=Dt(t),n=e.length,r=Array(n),i=0;i<n;i++)r[i]=[e[i],t[e[i]]];return r}function Qt(t){for(var e={},n=Dt(t),r=0,i=n.length;r<i;r++)e[t[n[r]]]=n[r];return e}function Yt(t){var e=[];for(var n in t)_e(t[n])&&e.push(n);return e.sort()}function Zt(t,e){return function(n){var r=arguments.length;if(e&&(n=Object(n)),r<2||null==n)return n;for(var i=1;i<r;i++)for(var s=arguments[i],o=t(s),a=o.length,u=0;u<a;u++){var c=o[u];e&&void 0!==n[c]||(n[c]=s[c])}return n}}var te=Zt(Vt),ee=Zt(Dt);function ne(t,e,n){e=x(e,n);for(var r,i=Dt(t),s=0,o=i.length;s<o;s++)if(e(t[r=i[s]],r,t))return r}function re(t,e,n){return e in n}var ie=w((function(t,e){var n={},r=e[0];if(null==t)return n;_e(r)?(e.length>1&&(r=y(r,e[1])),e=Vt(t)):(r=re,e=ct(e,!1,!1),t=Object(t));for(var i=0,s=e.length;i<s;i++){var o=e[i],a=t[o];r(a,o,t)&&(n[o]=a)}return n})),se=w((function(t,e){var n,r=e[0];return _e(r)?(r=zt(r),e.length>1&&(n=e[1])):(e=T(ct(e,!1,!1),String),r=function(t,n){return!U(e,n)}),ie(t,r,n)})),oe=Zt(Vt,!0);function ae(t,e){var n=E(t);return e&&ee(n,e),n}function ue(t){return me(t)?ge(t)?t.slice():te({},t):t}function ce(t,e){return e(t),t}function le(t,e){var n=Dt(e),r=n.length;if(null==t)return!r;for(var i=Object(t),s=0;s<r;s++){var o=n[s];if(e[o]!==i[o]||!(o in i))return!1}return!0}function he(t,e,n,r){if(t===e)return 0!==t||1/t==1/e;if(null==t||null==e)return!1;if(t!=t)return e!=e;var i=typeof t;return("function"===i||"object"===i||"object"==typeof e)&&function(t,e,n,r){t instanceof g&&(t=t._wrapped);e instanceof g&&(e=e._wrapped);var i=u.call(t);if(i!==u.call(e))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!=+t?+e!=+e:0==+t?1/+t==1/e:+t==+e;case"[object Date]":case"[object Boolean]":return+t==+e;case"[object Symbol]":return s.valueOf.call(t)===s.valueOf.call(e)}var o="[object Array]"===i;if(!o){if("object"!=typeof t||"object"!=typeof e)return!1;var a=t.constructor,c=e.constructor;if(a!==c&&!(_e(a)&&a instanceof a&&_e(c)&&c instanceof c)&&"constructor"in t&&"constructor"in e)return!1}r=r||[];var l=(n=n||[]).length;for(;l--;)if(n[l]===t)return r[l]===e;if(n.push(t),r.push(e),o){if((l=t.length)!==e.length)return!1;for(;l--;)if(!he(t[l],e[l],n,r))return!1}else{var h,f=Dt(t);if(l=f.length,Dt(e).length!==l)return!1;for(;l--;)if(!j(e,h=f[l])||!he(t[h],e[h],n,r))return!1}return n.pop(),r.pop(),!0}(t,e,n,r)}function fe(t,e){return he(t,e)}function de(t){return null==t||(O(t)&&(ge(t)||be(t)||ye(t))?0===t.length:0===Dt(t).length)}function pe(t){return!(!t||1!==t.nodeType)}function ve(t){return function(e){return u.call(e)==="[object "+t+"]"}}var ge=l||ve("Array");function me(t){var e=typeof t;return"function"===e||"object"===e&&!!t}var ye=ve("Arguments"),_e=ve("Function"),be=ve("String"),xe=ve("Number"),we=ve("Date"),Ee=ve("RegExp"),Se=ve("Error"),je=ve("Symbol"),ke=ve("Map"),Ie=ve("WeakMap"),Ae=ve("Set"),Oe=ve("WeakSet");!function(){ye(arguments)||(ye=function(t){return j(t,"callee")})}();var Me=n.document&&n.document.childNodes;function Te(t){return!je(t)&&p(t)&&!d(parseFloat(t))}function Ne(t){return xe(t)&&d(t)}function Re(t){return!0===t||!1===t||"[object Boolean]"===u.call(t)}function Pe(t){return null===t}function He(t){return void 0===t}function $e(t,e){if(!ge(e))return j(t,e);for(var n=e.length,r=0;r<n;r++){var i=e[r];if(null==t||!c.call(t,i))return!1;t=t[i]}return!!n}function Ce(t){return t}function ze(t){return function(){return t}}function Fe(){}function Ue(t){return ge(t)?function(e){return k(e,t)}:S(t)}function Be(t){return null==t?function(){}:function(e){return ge(e)?k(t,e):t[e]}}function qe(t){return t=ee({},t),function(e){return le(e,t)}}function Le(t,e,n){var r=Array(Math.max(0,t));e=y(e,n,1);for(var i=0;i<t;i++)r[i]=e(i);return r}function Je(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))}"function"!=typeof/./&&"object"!=typeof Int8Array&&"function"!=typeof Me&&(_e=function(t){return"function"==typeof t||!1});var We=Date.now||function(){return(new Date).getTime()},De={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},Ve=Qt(De);function Ke(t){var e=function(e){return t[e]},n="(?:"+Dt(t).join("|")+")",r=RegExp(n),i=RegExp(n,"g");return function(t){return t=null==t?"":""+t,r.test(t)?t.replace(i,e):t}}var Ge=Ke(De),Xe=Ke(Ve);function Qe(t,e,n){ge(e)||(e=[e]);var r=e.length;if(!r)return _e(n)?n.call(t):n;for(var i=0;i<r;i++){var s=null==t?void 0:t[e[i]];void 0===s&&(s=n,i=r),t=_e(s)?s.call(t):s}return t}var Ye=0;function Ze(t){var e=++Ye+"";return t?t+e:e}var tn=g.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g},en=/(.)^/,nn={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},rn=/\\|'|\r|\n|\u2028|\u2029/g,sn=function(t){return"\\"+nn[t]};function on(t,e,n){!e&&n&&(e=n),e=oe({},e,g.templateSettings);var r,i=RegExp([(e.escape||en).source,(e.interpolate||en).source,(e.evaluate||en).source].join("|")+"|$","g"),s=0,o="__p+='";t.replace(i,(function(e,n,r,i,a){return o+=t.slice(s,a).replace(rn,sn),s=a+e.length,n?o+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?o+="'+\n((__t=("+r+"))==null?'':__t)+\n'":i&&(o+="';\n"+i+"\n__p+='"),e})),o+="';\n",e.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{r=new Function(e.variable||"obj","_",o)}catch(t){throw t.source=o,t}var a=function(t){return r.call(this,t,g)},u=e.variable||"obj";return a.source="function("+u+"){\n"+o+"}",a}function an(t){var e=g(t);return e._chain=!0,e}function un(t,e){return t._chain?g(e).chain():e}function cn(t){return M(Yt(t),(function(e){var n=g[e]=t[e];g.prototype[e]=function(){var t=[this._wrapped];return o.apply(t,arguments),un(this,n.apply(g,t))}})),g}M(["pop","push","reverse","shift","sort","splice","unshift"],(function(t){var e=r[t];g.prototype[t]=function(){var n=this._wrapped;return e.apply(n,arguments),"shift"!==t&&"splice"!==t||0!==n.length||delete n[0],un(this,n)}})),M(["concat","join","slice"],(function(t){var e=r[t];g.prototype[t]=function(){return un(this,e.apply(this._wrapped,arguments))}})),g.prototype.value=function(){return this._wrapped},g.prototype.valueOf=g.prototype.toJSON=g.prototype.value,g.prototype.toString=function(){return String(this._wrapped)};var ln=cn(Object.freeze({__proto__:null,default:g,VERSION:m,iteratee:b,restArguments:w,each:M,forEach:M,map:T,collect:T,reduce:R,foldl:R,inject:R,reduceRight:P,foldr:P,find:H,detect:H,filter:$,select:$,reject:C,every:z,all:z,some:F,any:F,contains:U,includes:U,include:U,invoke:B,pluck:q,where:L,findWhere:J,max:W,min:D,shuffle:V,sample:K,sortBy:G,groupBy:Q,indexBy:Y,countBy:Z,toArray:et,size:nt,partition:rt,first:it,head:it,take:it,initial:st,last:ot,rest:at,tail:at,drop:at,compact:ut,flatten:lt,without:ht,uniq:ft,unique:ft,union:dt,intersection:pt,difference:vt,unzip:gt,zip:mt,object:yt,findIndex:bt,findLastIndex:xt,sortedIndex:wt,indexOf:St,lastIndexOf:jt,range:kt,chunk:It,bind:Ot,partial:Mt,bindAll:Tt,memoize:Nt,delay:Rt,defer:Pt,throttle:Ht,debounce:$t,wrap:Ct,negate:zt,compose:Ft,after:Ut,before:Bt,once:qt,keys:Dt,allKeys:Vt,values:Kt,mapObject:Gt,pairs:Xt,invert:Qt,functions:Yt,methods:Yt,extend:te,extendOwn:ee,assign:ee,findKey:ne,pick:ie,omit:se,defaults:oe,create:ae,clone:ue,tap:ce,isMatch:le,isEqual:fe,isEmpty:de,isElement:pe,isArray:ge,isObject:me,get isArguments(){return ye},get isFunction(){return _e},isString:be,isNumber:xe,isDate:we,isRegExp:Ee,isError:Se,isSymbol:je,isMap:ke,isWeakMap:Ie,isSet:Ae,isWeakSet:Oe,isFinite:Te,isNaN:Ne,isBoolean:Re,isNull:Pe,isUndefined:He,has:$e,identity:Ce,constant:ze,noop:Fe,property:Ue,propertyOf:Be,matcher:qe,matches:qe,times:Le,random:Je,now:We,escape:Ge,unescape:Xe,result:Qe,uniqueId:Ze,templateSettings:tn,template:on,chain:an,mixin:cn}));ln._=ln;var hn=Object.freeze({__proto__:null,default:ln,VERSION:m,iteratee:b,restArguments:w,each:M,forEach:M,map:T,collect:T,reduce:R,foldl:R,inject:R,reduceRight:P,foldr:P,find:H,detect:H,filter:$,select:$,reject:C,every:z,all:z,some:F,any:F,contains:U,includes:U,include:U,invoke:B,pluck:q,where:L,findWhere:J,max:W,min:D,shuffle:V,sample:K,sortBy:G,groupBy:Q,indexBy:Y,countBy:Z,toArray:et,size:nt,partition:rt,first:it,head:it,take:it,initial:st,last:ot,rest:at,tail:at,drop:at,compact:ut,flatten:lt,without:ht,uniq:ft,unique:ft,union:dt,intersection:pt,difference:vt,unzip:gt,zip:mt,object:yt,findIndex:bt,findLastIndex:xt,sortedIndex:wt,indexOf:St,lastIndexOf:jt,range:kt,chunk:It,bind:Ot,partial:Mt,bindAll:Tt,memoize:Nt,delay:Rt,defer:Pt,throttle:Ht,debounce:$t,wrap:Ct,negate:zt,compose:Ft,after:Ut,before:Bt,once:qt,keys:Dt,allKeys:Vt,values:Kt,mapObject:Gt,pairs:Xt,invert:Qt,functions:Yt,methods:Yt,extend:te,extendOwn:ee,assign:ee,findKey:ne,pick:ie,omit:se,defaults:oe,create:ae,clone:ue,tap:ce,isMatch:le,isEqual:fe,isEmpty:de,isElement:pe,isArray:ge,isObject:me,get isArguments(){return ye},get isFunction(){return _e},isString:be,isNumber:xe,isDate:we,isRegExp:Ee,isError:Se,isSymbol:je,isMap:ke,isWeakMap:Ie,isSet:Ae,isWeakSet:Oe,isFinite:Te,isNaN:Ne,isBoolean:Re,isNull:Pe,isUndefined:He,has:$e,identity:Ce,constant:ze,noop:Fe,property:Ue,propertyOf:Be,matcher:qe,matches:qe,times:Le,random:Je,now:We,escape:Ge,unescape:Xe,result:Qe,uniqueId:Ze,templateSettings:tn,template:on,chain:an,mixin:cn}),fn="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function dn(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&n.path)}},n.exports),n.exports}var pn=dn((function(t,n){!function(t){var r,i="object"==typeof self&&self.self===self&&self||"object"==typeof fn&&fn.global===fn&&fn,s=ln;try{r=e}catch(t){}!function(t,e,n,r){var i=t.Backbone,s=Array.prototype.slice;e.VERSION="1.4.0",e.$=r,e.noConflict=function(){return t.Backbone=i,this},e.emulateHTTP=!1,e.emulateJSON=!1;var o,a=e.Events={},u=/\s+/,c=function(t,e,r,i,s){var o,a=0;if(r&&"object"==typeof r){void 0!==i&&"context"in s&&void 0===s.context&&(s.context=i);for(o=n.keys(r);a<o.length;a++)e=c(t,e,o[a],r[o[a]],s)}else if(r&&u.test(r))for(o=r.split(u);a<o.length;a++)e=t(e,o[a],i,s);else e=t(e,r,i,s);return e};a.on=function(t,e,n){(this._events=c(l,this._events||{},t,e,{context:n,ctx:this,listening:o}),o)&&((this._listeners||(this._listeners={}))[o.id]=o,o.interop=!1);return this},a.listenTo=function(t,e,r){if(!t)return this;var i=t._listenId||(t._listenId=n.uniqueId("l")),s=this._listeningTo||(this._listeningTo={}),a=o=s[i];a||(this._listenId||(this._listenId=n.uniqueId("l")),a=o=s[i]=new g(this,t));var u=h(t,e,r,this);if(o=void 0,u)throw u;return a.interop&&a.on(e,r),this};var l=function(t,e,n,r){if(n){var i=t[e]||(t[e]=[]),s=r.context,o=r.ctx,a=r.listening;a&&a.count++,i.push({callback:n,context:s,ctx:s||o,listening:a})}return t},h=function(t,e,n,r){try{t.on(e,n,r)}catch(t){return t}};a.off=function(t,e,n){return this._events?(this._events=c(f,this._events,t,e,{context:n,listeners:this._listeners}),this):this},a.stopListening=function(t,e,r){var i=this._listeningTo;if(!i)return this;for(var s=t?[t._listenId]:n.keys(i),o=0;o<s.length;o++){var a=i[s[o]];if(!a)break;a.obj.off(e,r,this),a.interop&&a.off(e,r)}return n.isEmpty(i)&&(this._listeningTo=void 0),this};var f=function(t,e,r,i){if(t){var s,o=i.context,a=i.listeners,u=0;if(e||o||r){for(s=e?[e]:n.keys(t);u<s.length;u++){var c=t[e=s[u]];if(!c)break;for(var l=[],h=0;h<c.length;h++){var f=c[h];if(r&&r!==f.callback&&r!==f.callback._callback||o&&o!==f.context)l.push(f);else{var d=f.listening;d&&d.off(e,r)}}l.length?t[e]=l:delete t[e]}return t}for(s=n.keys(a);u<s.length;u++)a[s[u]].cleanup()}};a.once=function(t,e,n){var r=c(d,{},t,e,this.off.bind(this));return"string"==typeof t&&null==n&&(e=void 0),this.on(r,e,n)},a.listenToOnce=function(t,e,n){var r=c(d,{},e,n,this.stopListening.bind(this,t));return this.listenTo(t,r)};var d=function(t,e,r,i){if(r){var s=t[e]=n.once((function(){i(e,s),r.apply(this,arguments)}));s._callback=r}return t};a.trigger=function(t){if(!this._events)return this;for(var e=Math.max(0,arguments.length-1),n=Array(e),r=0;r<e;r++)n[r]=arguments[r+1];return c(p,this._events,t,void 0,n),this};var p=function(t,e,n,r){if(t){var i=t[e],s=t.all;i&&s&&(s=s.slice()),i&&v(i,r),s&&v(s,[e].concat(r))}return t},v=function(t,e){var n,r=-1,i=t.length,s=e[0],o=e[1],a=e[2];switch(e.length){case 0:for(;++r<i;)(n=t[r]).callback.call(n.ctx);return;case 1:for(;++r<i;)(n=t[r]).callback.call(n.ctx,s);return;case 2:for(;++r<i;)(n=t[r]).callback.call(n.ctx,s,o);return;case 3:for(;++r<i;)(n=t[r]).callback.call(n.ctx,s,o,a);return;default:for(;++r<i;)(n=t[r]).callback.apply(n.ctx,e);return}},g=function(t,e){this.id=t._listenId,this.listener=t,this.obj=e,this.interop=!0,this.count=0,this._events=void 0};g.prototype.on=a.on,g.prototype.off=function(t,e){var n;this.interop?(this._events=c(f,this._events,t,e,{context:void 0,listeners:void 0}),n=!this._events):(this.count--,n=0===this.count),n&&this.cleanup()},g.prototype.cleanup=function(){delete this.listener._listeningTo[this.obj._listenId],this.interop||delete this.obj._listeners[this.id]},a.bind=a.on,a.unbind=a.off,n.extend(e,a);var m=e.Model=function(t,e){var r=t||{};e||(e={}),this.preinitialize.apply(this,arguments),this.cid=n.uniqueId(this.cidPrefix),this.attributes={},e.collection&&(this.collection=e.collection),e.parse&&(r=this.parse(r,e)||{});var i=n.result(this,"defaults");r=n.defaults(n.extend({},i,r),i),this.set(r,e),this.changed={},this.initialize.apply(this,arguments)};n.extend(m.prototype,a,{changed:null,validationError:null,idAttribute:"id",cidPrefix:"c",preinitialize:function(){},initialize:function(){},toJSON:function(t){return n.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return n.escape(this.get(t))},has:function(t){return null!=this.get(t)},matches:function(t){return!!n.iteratee(t,this)(this.attributes)},set:function(t,e,r){if(null==t)return this;var i;if("object"==typeof t?(i=t,r=e):(i={})[t]=e,r||(r={}),!this._validate(i,r))return!1;var s=r.unset,o=r.silent,a=[],u=this._changing;this._changing=!0,u||(this._previousAttributes=n.clone(this.attributes),this.changed={});var c=this.attributes,l=this.changed,h=this._previousAttributes;for(var f in i)e=i[f],n.isEqual(c[f],e)||a.push(f),n.isEqual(h[f],e)?delete l[f]:l[f]=e,s?delete c[f]:c[f]=e;if(this.idAttribute in i&&(this.id=this.get(this.idAttribute)),!o){a.length&&(this._pending=r);for(var d=0;d<a.length;d++)this.trigger("change:"+a[d],this,c[a[d]],r)}if(u)return this;if(!o)for(;this._pending;)r=this._pending,this._pending=!1,this.trigger("change",this,r);return this._pending=!1,this._changing=!1,this},unset:function(t,e){return this.set(t,void 0,n.extend({},e,{unset:!0}))},clear:function(t){var e={};for(var r in this.attributes)e[r]=void 0;return this.set(e,n.extend({},t,{unset:!0}))},hasChanged:function(t){return null==t?!n.isEmpty(this.changed):n.has(this.changed,t)},changedAttributes:function(t){if(!t)return!!this.hasChanged()&&n.clone(this.changed);var e,r=this._changing?this._previousAttributes:this.attributes,i={};for(var s in t){var o=t[s];n.isEqual(r[s],o)||(i[s]=o,e=!0)}return!!e&&i},previous:function(t){return null!=t&&this._previousAttributes?this._previousAttributes[t]:null},previousAttributes:function(){return n.clone(this._previousAttributes)},fetch:function(t){t=n.extend({parse:!0},t);var e=this,r=t.success;return t.success=function(n){var i=t.parse?e.parse(n,t):n;if(!e.set(i,t))return!1;r&&r.call(t.context,e,n,t),e.trigger("sync",e,n,t)},K(this,t),this.sync("read",this,t)},save:function(t,e,r){var i;null==t||"object"==typeof t?(i=t,r=e):(i={})[t]=e;var s=(r=n.extend({validate:!0,parse:!0},r)).wait;if(i&&!s){if(!this.set(i,r))return!1}else if(!this._validate(i,r))return!1;var o=this,a=r.success,u=this.attributes;r.success=function(t){o.attributes=u;var e=r.parse?o.parse(t,r):t;if(s&&(e=n.extend({},i,e)),e&&!o.set(e,r))return!1;a&&a.call(r.context,o,t,r),o.trigger("sync",o,t,r)},K(this,r),i&&s&&(this.attributes=n.extend({},u,i));var c=this.isNew()?"create":r.patch?"patch":"update";"patch"!==c||r.attrs||(r.attrs=i);var l=this.sync(c,this,r);return this.attributes=u,l},destroy:function(t){t=t?n.clone(t):{};var e=this,r=t.success,i=t.wait,s=function(){e.stopListening(),e.trigger("destroy",e,e.collection,t)};t.success=function(n){i&&s(),r&&r.call(t.context,e,n,t),e.isNew()||e.trigger("sync",e,n,t)};var o=!1;return this.isNew()?n.defer(t.success):(K(this,t),o=this.sync("delete",this,t)),i||s(),o},url:function(){var t=n.result(this,"urlRoot")||n.result(this.collection,"url")||V();if(this.isNew())return t;var e=this.get(this.idAttribute);return t.replace(/[^\/]$/,"$&/")+encodeURIComponent(e)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},n.extend({},t,{validate:!0}))},_validate:function(t,e){if(!e.validate||!this.validate)return!0;t=n.extend({},this.attributes,t);var r=this.validationError=this.validate(t,e)||null;return!r||(this.trigger("invalid",this,r,n.extend(e,{validationError:r})),!1)}});var y=e.Collection=function(t,e){e||(e={}),this.preinitialize.apply(this,arguments),e.model&&(this.model=e.model),void 0!==e.comparator&&(this.comparator=e.comparator),this._reset(),this.initialize.apply(this,arguments),t&&this.reset(t,n.extend({silent:!0},e))},_={add:!0,remove:!0,merge:!0},b={add:!0,remove:!1},x=function(t,e,n){n=Math.min(Math.max(n,0),t.length);var r,i=Array(t.length-n),s=e.length;for(r=0;r<i.length;r++)i[r]=t[r+n];for(r=0;r<s;r++)t[r+n]=e[r];for(r=0;r<i.length;r++)t[r+s+n]=i[r]};n.extend(y.prototype,a,{model:m,preinitialize:function(){},initialize:function(){},toJSON:function(t){return this.map((function(e){return e.toJSON(t)}))},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,n.extend({merge:!1},e,b))},remove:function(t,e){e=n.extend({},e);var r=!n.isArray(t);t=r?[t]:t.slice();var i=this._removeModels(t,e);return!e.silent&&i.length&&(e.changes={added:[],merged:[],removed:i},this.trigger("update",this,e)),r?i[0]:i},set:function(t,e){if(null!=t){(e=n.extend({},_,e)).parse&&!this._isModel(t)&&(t=this.parse(t,e)||[]);var r=!n.isArray(t);t=r?[t]:t.slice();var i=e.at;null!=i&&(i=+i),i>this.length&&(i=this.length),i<0&&(i+=this.length+1);var s,o,a=[],u=[],c=[],l=[],h={},f=e.add,d=e.merge,p=e.remove,v=!1,g=this.comparator&&null==i&&!1!==e.sort,m=n.isString(this.comparator)?this.comparator:null;for(o=0;o<t.length;o++){s=t[o];var y=this.get(s);if(y){if(d&&s!==y){var b=this._isModel(s)?s.attributes:s;e.parse&&(b=y.parse(b,e)),y.set(b,e),c.push(y),g&&!v&&(v=y.hasChanged(m))}h[y.cid]||(h[y.cid]=!0,a.push(y)),t[o]=y}else f&&(s=t[o]=this._prepareModel(s,e))&&(u.push(s),this._addReference(s,e),h[s.cid]=!0,a.push(s))}if(p){for(o=0;o<this.length;o++)h[(s=this.models[o]).cid]||l.push(s);l.length&&this._removeModels(l,e)}var w=!1,E=!g&&f&&p;if(a.length&&E?(w=this.length!==a.length||n.some(this.models,(function(t,e){return t!==a[e]})),this.models.length=0,x(this.models,a,0),this.length=this.models.length):u.length&&(g&&(v=!0),x(this.models,u,null==i?this.length:i),this.length=this.models.length),v&&this.sort({silent:!0}),!e.silent){for(o=0;o<u.length;o++)null!=i&&(e.index=i+o),(s=u[o]).trigger("add",s,this,e);(v||w)&&this.trigger("sort",this,e),(u.length||l.length||c.length)&&(e.changes={added:u,removed:l,merged:c},this.trigger("update",this,e))}return r?t[0]:t}},reset:function(t,e){e=e?n.clone(e):{};for(var r=0;r<this.models.length;r++)this._removeReference(this.models[r],e);return e.previousModels=this.models,this._reset(),t=this.add(t,n.extend({silent:!0},e)),e.silent||this.trigger("reset",this,e),t},push:function(t,e){return this.add(t,n.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);return this.remove(e,t)},unshift:function(t,e){return this.add(t,n.extend({at:0},e))},shift:function(t){var e=this.at(0);return this.remove(e,t)},slice:function(){return s.apply(this.models,arguments)},get:function(t){if(null!=t)return this._byId[t]||this._byId[this.modelId(this._isModel(t)?t.attributes:t)]||t.cid&&this._byId[t.cid]},has:function(t){return null!=this.get(t)},at:function(t){return t<0&&(t+=this.length),this.models[t]},where:function(t,e){return this[e?"find":"filter"](t)},findWhere:function(t){return this.where(t,!0)},sort:function(t){var e=this.comparator;if(!e)throw new Error("Cannot sort a set without a comparator");t||(t={});var r=e.length;return n.isFunction(e)&&(e=e.bind(this)),1===r||n.isString(e)?this.models=this.sortBy(e):this.models.sort(e),t.silent||this.trigger("sort",this,t),this},pluck:function(t){return this.map(t+"")},fetch:function(t){var e=(t=n.extend({parse:!0},t)).success,r=this;return t.success=function(n){var i=t.reset?"reset":"set";r[i](n,t),e&&e.call(t.context,r,n,t),r.trigger("sync",r,n,t)},K(this,t),this.sync("read",this,t)},create:function(t,e){var r=(e=e?n.clone(e):{}).wait;if(!(t=this._prepareModel(t,e)))return!1;r||this.add(t,e);var i=this,s=e.success;return e.success=function(t,e,n){r&&i.add(t,n),s&&s.call(n.context,t,e,n)},t.save(null,e),t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models,{model:this.model,comparator:this.comparator})},modelId:function(t){return t[this.model.prototype.idAttribute||"id"]},values:function(){return new E(this,S)},keys:function(){return new E(this,j)},entries:function(){return new E(this,k)},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(t,e){if(this._isModel(t))return t.collection||(t.collection=this),t;(e=e?n.clone(e):{}).collection=this;var r=new this.model(t,e);return r.validationError?(this.trigger("invalid",this,r.validationError,e),!1):r},_removeModels:function(t,e){for(var n=[],r=0;r<t.length;r++){var i=this.get(t[r]);if(i){var s=this.indexOf(i);this.models.splice(s,1),this.length--,delete this._byId[i.cid];var o=this.modelId(i.attributes);null!=o&&delete this._byId[o],e.silent||(e.index=s,i.trigger("remove",i,this,e)),n.push(i),this._removeReference(i,e)}}return n},_isModel:function(t){return t instanceof m},_addReference:function(t,e){this._byId[t.cid]=t;var n=this.modelId(t.attributes);null!=n&&(this._byId[n]=t),t.on("all",this._onModelEvent,this)},_removeReference:function(t,e){delete this._byId[t.cid];var n=this.modelId(t.attributes);null!=n&&delete this._byId[n],this===t.collection&&delete t.collection,t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,e,n,r){if(e){if(("add"===t||"remove"===t)&&n!==this)return;if("destroy"===t&&this.remove(e,r),"change"===t){var i=this.modelId(e.previousAttributes()),s=this.modelId(e.attributes);i!==s&&(null!=i&&delete this._byId[i],null!=s&&(this._byId[s]=e))}}this.trigger.apply(this,arguments)}});var w="function"==typeof Symbol&&Symbol.iterator;w&&(y.prototype[w]=y.prototype.values);var E=function(t,e){this._collection=t,this._kind=e,this._index=0},S=1,j=2,k=3;w&&(E.prototype[w]=function(){return this});E.prototype.next=function(){if(this._collection){if(this._index<this._collection.length){var t,e=this._collection.at(this._index);if(this._index++,this._kind===S)t=e;else{var n=this._collection.modelId(e.attributes);t=this._kind===j?n:[n,e]}return{value:t,done:!1}}this._collection=void 0}return{value:void 0,done:!0}};var I=e.View=function(t){this.cid=n.uniqueId("view"),this.preinitialize.apply(this,arguments),n.extend(this,n.pick(t,O)),this._ensureElement(),this.initialize.apply(this,arguments)},A=/^(\S+)\s*(.*)$/,O=["model","collection","el","id","attributes","className","tagName","events"];n.extend(I.prototype,a,{tagName:"div",$:function(t){return this.$el.find(t)},preinitialize:function(){},initialize:function(){},render:function(){return this},remove:function(){return this._removeElement(),this.stopListening(),this},_removeElement:function(){this.$el.remove()},setElement:function(t){return this.undelegateEvents(),this._setElement(t),this.delegateEvents(),this},_setElement:function(t){this.$el=t instanceof e.$?t:e.$(t),this.el=this.$el[0]},delegateEvents:function(t){if(t||(t=n.result(this,"events")),!t)return this;for(var e in this.undelegateEvents(),t){var r=t[e];if(n.isFunction(r)||(r=this[r]),r){var i=e.match(A);this.delegate(i[1],i[2],r.bind(this))}}return this},delegate:function(t,e,n){return this.$el.on(t+".delegateEvents"+this.cid,e,n),this},undelegateEvents:function(){return this.$el&&this.$el.off(".delegateEvents"+this.cid),this},undelegate:function(t,e,n){return this.$el.off(t+".delegateEvents"+this.cid,e,n),this},_createElement:function(t){return document.createElement(t)},_ensureElement:function(){if(this.el)this.setElement(n.result(this,"el"));else{var t=n.extend({},n.result(this,"attributes"));this.id&&(t.id=n.result(this,"id")),this.className&&(t.class=n.result(this,"className")),this.setElement(this._createElement(n.result(this,"tagName"))),this._setAttributes(t)}},_setAttributes:function(t){this.$el.attr(t)}});var M=function(t,e,n,r){switch(e){case 1:return function(){return t[n](this[r])};case 2:return function(e){return t[n](this[r],e)};case 3:return function(e,i){return t[n](this[r],N(e,this),i)};case 4:return function(e,i,s){return t[n](this[r],N(e,this),i,s)};default:return function(){var e=s.call(arguments);return e.unshift(this[r]),t[n].apply(t,e)}}},T=function(t,e,r,i){n.each(r,(function(n,r){e[r]&&(t.prototype[r]=M(e,n,r,i))}))},N=function(t,e){return n.isFunction(t)?t:n.isObject(t)&&!e._isModel(t)?R(t):n.isString(t)?function(e){return e.get(t)}:t},R=function(t){var e=n.matches(t);return function(t){return e(t.attributes)}},P={forEach:3,each:3,map:3,collect:3,reduce:0,foldl:0,inject:0,reduceRight:0,foldr:0,find:3,detect:3,filter:3,select:3,reject:3,every:3,all:3,some:3,any:3,include:3,includes:3,contains:3,invoke:0,max:3,min:3,toArray:1,size:1,first:3,head:3,take:3,initial:3,rest:3,tail:3,drop:3,last:3,without:0,difference:0,indexOf:3,shuffle:1,lastIndexOf:3,isEmpty:1,chain:1,sample:3,partition:3,groupBy:3,countBy:3,sortBy:3,indexBy:3,findIndex:3,findLastIndex:3},H={keys:1,values:1,pairs:1,invert:1,pick:0,omit:0,chain:1,isEmpty:1};n.each([[y,P,"models"],[m,H,"attributes"]],(function(t){var e=t[0],r=t[1],i=t[2];e.mixin=function(t){var r=n.reduce(n.functions(t),(function(t,e){return t[e]=0,t}),{});T(e,t,r,i)},T(e,n,r,i)})),e.sync=function(t,r,i){var s=$[t];n.defaults(i||(i={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var o={type:s,dataType:"json"};if(i.url||(o.url=n.result(r,"url")||V()),null!=i.data||!r||"create"!==t&&"update"!==t&&"patch"!==t||(o.contentType="application/json",o.data=JSON.stringify(i.attrs||r.toJSON(i))),i.emulateJSON&&(o.contentType="application/x-www-form-urlencoded",o.data=o.data?{model:o.data}:{}),i.emulateHTTP&&("PUT"===s||"DELETE"===s||"PATCH"===s)){o.type="POST",i.emulateJSON&&(o.data._method=s);var a=i.beforeSend;i.beforeSend=function(t){if(t.setRequestHeader("X-HTTP-Method-Override",s),a)return a.apply(this,arguments)}}"GET"===o.type||i.emulateJSON||(o.processData=!1);var u=i.error;i.error=function(t,e,n){i.textStatus=e,i.errorThrown=n,u&&u.call(i.context,t,e,n)};var c=i.xhr=e.ajax(n.extend(o,i));return r.trigger("request",r,c,i),c};var $={create:"POST",update:"PUT",patch:"PATCH",delete:"DELETE",read:"GET"};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var C=e.Router=function(t){t||(t={}),this.preinitialize.apply(this,arguments),t.routes&&(this.routes=t.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},z=/\((.*?)\)/g,F=/(\(\?)?:\w+/g,U=/\*\w+/g,B=/[\-{}\[\]+?.,\\\^$|#\s]/g;n.extend(C.prototype,a,{preinitialize:function(){},initialize:function(){},route:function(t,r,i){n.isRegExp(t)||(t=this._routeToRegExp(t)),n.isFunction(r)&&(i=r,r=""),i||(i=this[r]);var s=this;return e.history.route(t,(function(n){var o=s._extractParameters(t,n);!1!==s.execute(i,o,r)&&(s.trigger.apply(s,["route:"+r].concat(o)),s.trigger("route",r,o),e.history.trigger("route",s,r,o))})),this},execute:function(t,e,n){t&&t.apply(this,e)},navigate:function(t,n){return e.history.navigate(t,n),this},_bindRoutes:function(){if(this.routes){this.routes=n.result(this,"routes");for(var t,e=n.keys(this.routes);null!=(t=e.pop());)this.route(t,this.routes[t])}},_routeToRegExp:function(t){return t=t.replace(B,"\\$&").replace(z,"(?:$1)?").replace(F,(function(t,e){return e?t:"([^/?]+)"})).replace(U,"([^?]*?)"),new RegExp("^"+t+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(t,e){var r=t.exec(e).slice(1);return n.map(r,(function(t,e){return e===r.length-1?t||null:t?decodeURIComponent(t):null}))}});var q=e.History=function(){this.handlers=[],this.checkUrl=this.checkUrl.bind(this),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},L=/^[#\/]|\s+$/g,J=/^\/+|\/+$/g,W=/#.*$/;q.started=!1,n.extend(q.prototype,a,{interval:50,atRoot:function(){return this.location.pathname.replace(/[^\/]$/,"$&/")===this.root&&!this.getSearch()},matchRoot:function(){return this.decodeFragment(this.location.pathname).slice(0,this.root.length-1)+"/"===this.root},decodeFragment:function(t){return decodeURI(t.replace(/%25/g,"%2525"))},getSearch:function(){var t=this.location.href.replace(/#.*/,"").match(/\?.+/);return t?t[0]:""},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""},getPath:function(){var t=this.decodeFragment(this.location.pathname+this.getSearch()).slice(this.root.length-1);return"/"===t.charAt(0)?t.slice(1):t},getFragment:function(t){return null==t&&(t=this._usePushState||!this._wantsHashChange?this.getPath():this.getHash()),t.replace(L,"")},start:function(t){if(q.started)throw new Error("Backbone.history has already been started");if(q.started=!0,this.options=n.extend({root:"/"},this.options,t),this.root=this.options.root,this._wantsHashChange=!1!==this.options.hashChange,this._hasHashChange="onhashchange"in window&&(void 0===document.documentMode||document.documentMode>7),this._useHashChange=this._wantsHashChange&&this._hasHashChange,this._wantsPushState=!!this.options.pushState,this._hasPushState=!(!this.history||!this.history.pushState),this._usePushState=this._wantsPushState&&this._hasPushState,this.fragment=this.getFragment(),this.root=("/"+this.root+"/").replace(J,"/"),this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot()){var e=this.root.slice(0,-1)||"/";return this.location.replace(e+"#"+this.getPath()),!0}this._hasPushState&&this.atRoot()&&this.navigate(this.getHash(),{replace:!0})}if(!this._hasHashChange&&this._wantsHashChange&&!this._usePushState){this.iframe=document.createElement("iframe"),this.iframe.src="javascript:0",this.iframe.style.display="none",this.iframe.tabIndex=-1;var r=document.body,i=r.insertBefore(this.iframe,r.firstChild).contentWindow;i.document.open(),i.document.close(),i.location.hash="#"+this.fragment}var s=window.addEventListener||function(t,e){return attachEvent("on"+t,e)};if(this._usePushState?s("popstate",this.checkUrl,!1):this._useHashChange&&!this.iframe?s("hashchange",this.checkUrl,!1):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),!this.options.silent)return this.loadUrl()},stop:function(){var t=window.removeEventListener||function(t,e){return detachEvent("on"+t,e)};this._usePushState?t("popstate",this.checkUrl,!1):this._useHashChange&&!this.iframe&&t("hashchange",this.checkUrl,!1),this.iframe&&(document.body.removeChild(this.iframe),this.iframe=null),this._checkUrlInterval&&clearInterval(this._checkUrlInterval),q.started=!1},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();if(e===this.fragment&&this.iframe&&(e=this.getHash(this.iframe.contentWindow)),e===this.fragment)return!1;this.iframe&&this.navigate(e),this.loadUrl()},loadUrl:function(t){return!!this.matchRoot()&&(t=this.fragment=this.getFragment(t),n.some(this.handlers,(function(e){if(e.route.test(t))return e.callback(t),!0})))},navigate:function(t,e){if(!q.started)return!1;e&&!0!==e||(e={trigger:!!e}),t=this.getFragment(t||"");var n=this.root;""!==t&&"?"!==t.charAt(0)||(n=n.slice(0,-1)||"/");var r=n+t;t=t.replace(W,"");var i=this.decodeFragment(t);if(this.fragment!==i){if(this.fragment=i,this._usePushState)this.history[e.replace?"replaceState":"pushState"]({},document.title,r);else{if(!this._wantsHashChange)return this.location.assign(r);if(this._updateHash(this.location,t,e.replace),this.iframe&&t!==this.getHash(this.iframe.contentWindow)){var s=this.iframe.contentWindow;e.replace||(s.document.open(),s.document.close()),this._updateHash(s.location,t,e.replace)}}return e.trigger?this.loadUrl(t):void 0}},_updateHash:function(t,e,n){if(n){var r=t.href.replace(/(javascript:|#).*$/,"");t.replace(r+"#"+e)}else t.hash="#"+e}}),e.history=new q;var D=function(t,e){var r,i=this;return r=t&&n.has(t,"constructor")?t.constructor:function(){return i.apply(this,arguments)},n.extend(r,i,e),r.prototype=n.create(i.prototype,t),r.prototype.constructor=r,r.__super__=i.prototype,r};m.extend=y.extend=C.extend=I.extend=q.extend=D;var V=function(){throw new Error('A "url" property or function must be specified')},K=function(t,e){var n=e.error;e.error=function(r){n&&n.call(e.context,t,r,e),t.trigger("error",t,r,e)}}}(i,n,s,r)}()})),vn="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||Function("return this")()||{},gn=Array.prototype,mn=Object.prototype,yn="undefined"!=typeof Symbol?Symbol.prototype:null,_n=gn.push,bn=gn.slice,xn=mn.toString,wn=mn.hasOwnProperty,En=Array.isArray,Sn=Object.keys,jn=Object.create,kn=vn.isNaN,In=vn.isFinite,An=function(){};function On(t){return t instanceof On?t:this instanceof On?void(this._wrapped=t):new On(t)}var Mn=On.VERSION="1.10.2";function Tn(t,e,n){if(void 0===e)return t;switch(null==n?3:n){case 1:return function(n){return t.call(e,n)};case 3:return function(n,r,i){return t.call(e,n,r,i)};case 4:return function(n,r,i,s){return t.call(e,n,r,i,s)}}return function(){return t.apply(e,arguments)}}function Nn(t,e,n){return null==t?yi:ii(t)?Tn(t,e,n):ni(t)&&!ei(t)?bi(t):_i(t)}function Rn(t,e){return Nn(t,e,1/0)}function Pn(t,e,n){return On.iteratee!==Rn?On.iteratee(t,e):Nn(t,e,n)}function Hn(t,e){return e=null==e?t.length-1:+e,function(){for(var n=Math.max(arguments.length-e,0),r=Array(n),i=0;i<n;i++)r[i]=arguments[i+e];switch(e){case 0:return t.call(this,r);case 1:return t.call(this,arguments[0],r);case 2:return t.call(this,arguments[0],arguments[1],r)}var s=Array(e+1);for(i=0;i<e;i++)s[i]=arguments[i];return s[e]=r,t.apply(this,s)}}function $n(t){if(!ni(t))return{};if(jn)return jn(t);An.prototype=t;var e=new An;return An.prototype=null,e}function Cn(t){return function(e){return null==e?void 0:e[t]}}function zn(t,e){return null!=t&&wn.call(t,e)}function Fn(t,e){for(var n=e.length,r=0;r<n;r++){if(null==t)return;t=t[e[r]]}return n?t:void 0}On.iteratee=Rn;var Un=Math.pow(2,53)-1,Bn=Cn("length");function qn(t){var e=Bn(t);return"number"==typeof e&&e>=0&&e<=Un}function Ln(t,e,n){var r,i;if(e=Tn(e,n),qn(t))for(r=0,i=t.length;r<i;r++)e(t[r],r,t);else{var s=zr(t);for(r=0,i=s.length;r<i;r++)e(t[s[r]],s[r],t)}return t}function Jn(t,e,n){e=Pn(e,n);for(var r=!qn(t)&&zr(t),i=(r||t).length,s=Array(i),o=0;o<i;o++){var a=r?r[o]:o;s[o]=e(t[a],a,t)}return s}function Wn(t){var e=function(e,n,r,i){var s=!qn(e)&&zr(e),o=(s||e).length,a=t>0?0:o-1;for(i||(r=e[s?s[a]:a],a+=t);a>=0&&a<o;a+=t){var u=s?s[a]:a;r=n(r,e[u],u,e)}return r};return function(t,n,r,i){var s=arguments.length>=3;return e(t,Tn(n,i,4),r,s)}}var Dn=Wn(1),Vn=Wn(-1);function Kn(t,e,n){var r=(qn(t)?br:Dr)(t,e,n);if(void 0!==r&&-1!==r)return t[r]}function Gn(t,e,n){var r=[];return e=Pn(e,n),Ln(t,(function(t,n,i){e(t,n,i)&&r.push(t)})),r}function Xn(t,e,n){e=Pn(e,n);for(var r=!qn(t)&&zr(t),i=(r||t).length,s=0;s<i;s++){var o=r?r[s]:s;if(!e(t[o],o,t))return!1}return!0}function Qn(t,e,n){e=Pn(e,n);for(var r=!qn(t)&&zr(t),i=(r||t).length,s=0;s<i;s++){var o=r?r[s]:s;if(e(t[o],o,t))return!0}return!1}function Yn(t,e,n,r){return qn(t)||(t=Ur(t)),("number"!=typeof n||r)&&(n=0),Sr(t,e,n)>=0}var Zn=Hn((function(t,e,n){var r,i;return ii(e)?i=e:ei(e)&&(r=e.slice(0,-1),e=e[e.length-1]),Jn(t,(function(t){var s=i;if(!s){if(r&&r.length&&(t=Fn(t,r)),null==t)return;s=t[e]}return null==s?s:s.apply(t,n)}))}));function tr(t,e){return Jn(t,_i(e))}function er(t,e,n){var r,i,s=-1/0,o=-1/0;if(null==e||"number"==typeof e&&"object"!=typeof t[0]&&null!=t)for(var a=0,u=(t=qn(t)?t:Ur(t)).length;a<u;a++)null!=(r=t[a])&&r>s&&(s=r);else e=Pn(e,n),Ln(t,(function(t,n,r){((i=e(t,n,r))>o||i===-1/0&&s===-1/0)&&(s=t,o=i)}));return s}function nr(t,e,n){if(null==e||n)return qn(t)||(t=Ur(t)),t[xi(t.length-1)];var r=qn(t)?Qr(t):Ur(t),i=Bn(r);e=Math.max(Math.min(e,i),0);for(var s=i-1,o=0;o<e;o++){var a=xi(o,s),u=r[o];r[o]=r[a],r[a]=u}return r.slice(0,e)}function rr(t,e){return function(n,r,i){var s=e?[[],[]]:{};return r=Pn(r,i),Ln(n,(function(e,i){var o=r(e,i,n);t(s,e,o)})),s}}var ir=rr((function(t,e,n){zn(t,n)?t[n].push(e):t[n]=[e]})),sr=rr((function(t,e,n){t[n]=e})),or=rr((function(t,e,n){zn(t,n)?t[n]++:t[n]=1})),ar=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;var ur=rr((function(t,e,n){t[n?0:1].push(e)}),!0);function cr(t,e,n){return null==t||t.length<1?null==e?void 0:[]:null==e||n?t[0]:lr(t,t.length-e)}function lr(t,e,n){return bn.call(t,0,Math.max(0,t.length-(null==e||n?1:e)))}function hr(t,e,n){return bn.call(t,null==e||n?1:e)}function fr(t,e,n,r){for(var i=(r=r||[]).length,s=0,o=Bn(t);s<o;s++){var a=t[s];if(qn(a)&&(ei(a)||ri(a)))if(e)for(var u=0,c=a.length;u<c;)r[i++]=a[u++];else fr(a,e,n,r),i=r.length;else n||(r[i++]=a)}return r}var dr=Hn((function(t,e){return gr(t,e)}));function pr(t,e,n,r){mi(e)||(r=n,n=e,e=!1),null!=n&&(n=Pn(n,r));for(var i=[],s=[],o=0,a=Bn(t);o<a;o++){var u=t[o],c=n?n(u,o,t):u;e&&!n?(o&&s===c||i.push(u),s=c):n?Yn(s,c)||(s.push(c),i.push(u)):Yn(i,u)||i.push(u)}return i}var vr=Hn((function(t){return pr(fr(t,!0,!0))}));var gr=Hn((function(t,e){return e=fr(e,!0,!0),Gn(t,(function(t){return!Yn(e,t)}))}));function mr(t){for(var e=t&&er(t,Bn).length||0,n=Array(e),r=0;r<e;r++)n[r]=tr(t,r);return n}var yr=Hn(mr);function _r(t){return function(e,n,r){n=Pn(n,r);for(var i=Bn(e),s=t>0?0:i-1;s>=0&&s<i;s+=t)if(n(e[s],s,e))return s;return-1}}var br=_r(1),xr=_r(-1);function wr(t,e,n,r){for(var i=(n=Pn(n,r,1))(e),s=0,o=Bn(t);s<o;){var a=Math.floor((s+o)/2);n(t[a])<i?s=a+1:o=a}return s}function Er(t,e,n){return function(r,i,s){var o=0,a=Bn(r);if("number"==typeof s)t>0?o=s>=0?s:Math.max(s+a,o):a=s>=0?Math.min(s+1,a):s+a+1;else if(n&&s&&a)return r[s=n(r,i)]===i?s:-1;if(i!=i)return(s=e(bn.call(r,o,a),gi))>=0?s+o:-1;for(s=t>0?o:a-1;s>=0&&s<a;s+=t)if(r[s]===i)return s;return-1}}var Sr=Er(1,br,wr),jr=Er(-1,xr);function kr(t,e,n,r,i){if(!(r instanceof e))return t.apply(n,i);var s=$n(t.prototype),o=t.apply(s,i);return ni(o)?o:s}var Ir=Hn((function(t,e,n){if(!ii(t))throw new TypeError("Bind must be called on a function");var r=Hn((function(i){return kr(t,r,e,this,n.concat(i))}));return r})),Ar=Hn((function(t,e){var n=Ar.placeholder,r=function(){for(var i=0,s=e.length,o=Array(s),a=0;a<s;a++)o[a]=e[a]===n?arguments[i++]:e[a];for(;i<arguments.length;)o.push(arguments[i++]);return kr(t,r,this,this,o)};return r}));Ar.placeholder=On;var Or=Hn((function(t,e){var n=(e=fr(e,!1,!1)).length;if(n<1)throw new Error("bindAll must be passed function names");for(;n--;){var r=e[n];t[r]=Ir(t[r],t)}}));var Mr=Hn((function(t,e,n){return setTimeout((function(){return t.apply(null,n)}),e)})),Tr=Ar(Mr,On,1);function Nr(t){return function(){return!t.apply(this,arguments)}}function Rr(t,e){var n;return function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=null),n}}var Pr=Ar(Rr,2),Hr=!{toString:null}.propertyIsEnumerable("toString"),$r=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];function Cr(t,e){var n=$r.length,r=t.constructor,i=ii(r)&&r.prototype||mn,s="constructor";for(zn(t,s)&&!Yn(e,s)&&e.push(s);n--;)(s=$r[n])in t&&t[s]!==i[s]&&!Yn(e,s)&&e.push(s)}function zr(t){if(!ni(t))return[];if(Sn)return Sn(t);var e=[];for(var n in t)zn(t,n)&&e.push(n);return Hr&&Cr(t,e),e}function Fr(t){if(!ni(t))return[];var e=[];for(var n in t)e.push(n);return Hr&&Cr(t,e),e}function Ur(t){for(var e=zr(t),n=e.length,r=Array(n),i=0;i<n;i++)r[i]=t[e[i]];return r}function Br(t){for(var e={},n=zr(t),r=0,i=n.length;r<i;r++)e[t[n[r]]]=n[r];return e}function qr(t){var e=[];for(var n in t)ii(t[n])&&e.push(n);return e.sort()}function Lr(t,e){return function(n){var r=arguments.length;if(e&&(n=Object(n)),r<2||null==n)return n;for(var i=1;i<r;i++)for(var s=arguments[i],o=t(s),a=o.length,u=0;u<a;u++){var c=o[u];e&&void 0!==n[c]||(n[c]=s[c])}return n}}var Jr=Lr(Fr),Wr=Lr(zr);function Dr(t,e,n){e=Pn(e,n);for(var r,i=zr(t),s=0,o=i.length;s<o;s++)if(e(t[r=i[s]],r,t))return r}function Vr(t,e,n){return e in n}var Kr=Hn((function(t,e){var n={},r=e[0];if(null==t)return n;ii(r)?(e.length>1&&(r=Tn(r,e[1])),e=Fr(t)):(r=Vr,e=fr(e,!1,!1),t=Object(t));for(var i=0,s=e.length;i<s;i++){var o=e[i],a=t[o];r(a,o,t)&&(n[o]=a)}return n})),Gr=Hn((function(t,e){var n,r=e[0];return ii(r)?(r=Nr(r),e.length>1&&(n=e[1])):(e=Jn(fr(e,!1,!1),String),r=function(t,n){return!Yn(e,n)}),Kr(t,r,n)})),Xr=Lr(Fr,!0);function Qr(t){return ni(t)?ei(t)?t.slice():Jr({},t):t}function Yr(t,e){var n=zr(e),r=n.length;if(null==t)return!r;for(var i=Object(t),s=0;s<r;s++){var o=n[s];if(e[o]!==i[o]||!(o in i))return!1}return!0}function Zr(t,e,n,r){if(t===e)return 0!==t||1/t==1/e;if(null==t||null==e)return!1;if(t!=t)return e!=e;var i=typeof t;return("function"===i||"object"===i||"object"==typeof e)&&function(t,e,n,r){t instanceof On&&(t=t._wrapped);e instanceof On&&(e=e._wrapped);var i=xn.call(t);if(i!==xn.call(e))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!=+t?+e!=+e:0==+t?1/+t==1/e:+t==+e;case"[object Date]":case"[object Boolean]":return+t==+e;case"[object Symbol]":return yn.valueOf.call(t)===yn.valueOf.call(e)}var s="[object Array]"===i;if(!s){if("object"!=typeof t||"object"!=typeof e)return!1;var o=t.constructor,a=e.constructor;if(o!==a&&!(ii(o)&&o instanceof o&&ii(a)&&a instanceof a)&&"constructor"in t&&"constructor"in e)return!1}r=r||[];var u=(n=n||[]).length;for(;u--;)if(n[u]===t)return r[u]===e;if(n.push(t),r.push(e),s){if((u=t.length)!==e.length)return!1;for(;u--;)if(!Zr(t[u],e[u],n,r))return!1}else{var c,l=zr(t);if(u=l.length,zr(e).length!==u)return!1;for(;u--;)if(!zn(e,c=l[u])||!Zr(t[c],e[c],n,r))return!1}return n.pop(),r.pop(),!0}(t,e,n,r)}function ti(t){return function(e){return xn.call(e)==="[object "+t+"]"}}var ei=En||ti("Array");function ni(t){var e=typeof t;return"function"===e||"object"===e&&!!t}var ri=ti("Arguments"),ii=ti("Function"),si=ti("String"),oi=ti("Number"),ai=ti("Date"),ui=ti("RegExp"),ci=ti("Error"),li=ti("Symbol"),hi=ti("Map"),fi=ti("WeakMap"),di=ti("Set"),pi=ti("WeakSet");!function(){ri(arguments)||(ri=function(t){return zn(t,"callee")})}();var vi=vn.document&&vn.document.childNodes;function gi(t){return oi(t)&&kn(t)}function mi(t){return!0===t||!1===t||"[object Boolean]"===xn.call(t)}function yi(t){return t}function _i(t){return ei(t)?function(e){return Fn(e,t)}:Cn(t)}function bi(t){return t=Wr({},t),function(e){return Yr(e,t)}}function xi(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))}"function"!=typeof/./&&"object"!=typeof Int8Array&&"function"!=typeof vi&&(ii=function(t){return"function"==typeof t||!1});var wi=Date.now||function(){return(new Date).getTime()},Ei={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},Si=Br(Ei);function ji(t){var e=function(e){return t[e]},n="(?:"+zr(t).join("|")+")",r=RegExp(n),i=RegExp(n,"g");return function(t){return t=null==t?"":""+t,r.test(t)?t.replace(i,e):t}}var ki=ji(Ei),Ii=ji(Si);var Ai=0;var Oi=On.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g},Mi=/(.)^/,Ti={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},Ni=/\\|'|\r|\n|\u2028|\u2029/g,Ri=function(t){return"\\"+Ti[t]};function Pi(t,e){return t._chain?On(e).chain():e}function Hi(t){return Ln(qr(t),(function(e){var n=On[e]=t[e];On.prototype[e]=function(){var t=[this._wrapped];return _n.apply(t,arguments),Pi(this,n.apply(On,t))}})),On}Ln(["pop","push","reverse","shift","sort","splice","unshift"],(function(t){var e=gn[t];On.prototype[t]=function(){var n=this._wrapped;return e.apply(n,arguments),"shift"!==t&&"splice"!==t||0!==n.length||delete n[0],Pi(this,n)}})),Ln(["concat","join","slice"],(function(t){var e=gn[t];On.prototype[t]=function(){return Pi(this,e.apply(this._wrapped,arguments))}})),On.prototype.value=function(){return this._wrapped},On.prototype.valueOf=On.prototype.toJSON=On.prototype.value,On.prototype.toString=function(){return String(this._wrapped)};var $i=Hi(Object.freeze({__proto__:null,default:On,VERSION:Mn,iteratee:Rn,restArguments:Hn,each:Ln,forEach:Ln,map:Jn,collect:Jn,reduce:Dn,foldl:Dn,inject:Dn,reduceRight:Vn,foldr:Vn,find:Kn,detect:Kn,filter:Gn,select:Gn,reject:function(t,e,n){return Gn(t,Nr(Pn(e)),n)},every:Xn,all:Xn,some:Qn,any:Qn,contains:Yn,includes:Yn,include:Yn,invoke:Zn,pluck:tr,where:function(t,e){return Gn(t,bi(e))},findWhere:function(t,e){return Kn(t,bi(e))},max:er,min:function(t,e,n){var r,i,s=1/0,o=1/0;if(null==e||"number"==typeof e&&"object"!=typeof t[0]&&null!=t)for(var a=0,u=(t=qn(t)?t:Ur(t)).length;a<u;a++)null!=(r=t[a])&&r<s&&(s=r);else e=Pn(e,n),Ln(t,(function(t,n,r){((i=e(t,n,r))<o||i===1/0&&s===1/0)&&(s=t,o=i)}));return s},shuffle:function(t){return nr(t,1/0)},sample:nr,sortBy:function(t,e,n){var r=0;return e=Pn(e,n),tr(Jn(t,(function(t,n,i){return{value:t,index:r++,criteria:e(t,n,i)}})).sort((function(t,e){var n=t.criteria,r=e.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(n<r||void 0===r)return-1}return t.index-e.index})),"value")},groupBy:ir,indexBy:sr,countBy:or,toArray:function(t){return t?ei(t)?bn.call(t):si(t)?t.match(ar):qn(t)?Jn(t,yi):Ur(t):[]},size:function(t){return null==t?0:qn(t)?t.length:zr(t).length},partition:ur,first:cr,head:cr,take:cr,initial:lr,last:function(t,e,n){return null==t||t.length<1?null==e?void 0:[]:null==e||n?t[t.length-1]:hr(t,Math.max(0,t.length-e))},rest:hr,tail:hr,drop:hr,compact:function(t){return Gn(t,Boolean)},flatten:function(t,e){return fr(t,e,!1)},without:dr,uniq:pr,unique:pr,union:vr,intersection:function(t){for(var e=[],n=arguments.length,r=0,i=Bn(t);r<i;r++){var s=t[r];if(!Yn(e,s)){var o;for(o=1;o<n&&Yn(arguments[o],s);o++);o===n&&e.push(s)}}return e},difference:gr,unzip:mr,zip:yr,object:function(t,e){for(var n={},r=0,i=Bn(t);r<i;r++)e?n[t[r]]=e[r]:n[t[r][0]]=t[r][1];return n},findIndex:br,findLastIndex:xr,sortedIndex:wr,indexOf:Sr,lastIndexOf:jr,range:function(t,e,n){null==e&&(e=t||0,t=0),n||(n=e<t?-1:1);for(var r=Math.max(Math.ceil((e-t)/n),0),i=Array(r),s=0;s<r;s++,t+=n)i[s]=t;return i},chunk:function(t,e){if(null==e||e<1)return[];for(var n=[],r=0,i=t.length;r<i;)n.push(bn.call(t,r,r+=e));return n},bind:Ir,partial:Ar,bindAll:Or,memoize:function(t,e){var n=function(r){var i=n.cache,s=""+(e?e.apply(this,arguments):r);return zn(i,s)||(i[s]=t.apply(this,arguments)),i[s]};return n.cache={},n},delay:Mr,defer:Tr,throttle:function(t,e,n){var r,i,s,o,a=0;n||(n={});var u=function(){a=!1===n.leading?0:wi(),r=null,o=t.apply(i,s),r||(i=s=null)},c=function(){var c=wi();a||!1!==n.leading||(a=c);var l=e-(c-a);return i=this,s=arguments,l<=0||l>e?(r&&(clearTimeout(r),r=null),a=c,o=t.apply(i,s),r||(i=s=null)):r||!1===n.trailing||(r=setTimeout(u,l)),o};return c.cancel=function(){clearTimeout(r),a=0,r=i=s=null},c},debounce:function(t,e,n){var r,i,s=function(e,n){r=null,n&&(i=t.apply(e,n))},o=Hn((function(o){if(r&&clearTimeout(r),n){var a=!r;r=setTimeout(s,e),a&&(i=t.apply(this,o))}else r=Mr(s,e,this,o);return i}));return o.cancel=function(){clearTimeout(r),r=null},o},wrap:function(t,e){return Ar(e,t)},negate:Nr,compose:function(){var t=arguments,e=t.length-1;return function(){for(var n=e,r=t[e].apply(this,arguments);n--;)r=t[n].call(this,r);return r}},after:function(t,e){return function(){if(--t<1)return e.apply(this,arguments)}},before:Rr,once:Pr,keys:zr,allKeys:Fr,values:Ur,mapObject:function(t,e,n){e=Pn(e,n);for(var r=zr(t),i=r.length,s={},o=0;o<i;o++){var a=r[o];s[a]=e(t[a],a,t)}return s},pairs:function(t){for(var e=zr(t),n=e.length,r=Array(n),i=0;i<n;i++)r[i]=[e[i],t[e[i]]];return r},invert:Br,functions:qr,methods:qr,extend:Jr,extendOwn:Wr,assign:Wr,findKey:Dr,pick:Kr,omit:Gr,defaults:Xr,create:function(t,e){var n=$n(t);return e&&Wr(n,e),n},clone:Qr,tap:function(t,e){return e(t),t},isMatch:Yr,isEqual:function(t,e){return Zr(t,e)},isEmpty:function(t){return null==t||(qn(t)&&(ei(t)||si(t)||ri(t))?0===t.length:0===zr(t).length)},isElement:function(t){return!(!t||1!==t.nodeType)},isArray:ei,isObject:ni,get isArguments(){return ri},get isFunction(){return ii},isString:si,isNumber:oi,isDate:ai,isRegExp:ui,isError:ci,isSymbol:li,isMap:hi,isWeakMap:fi,isSet:di,isWeakSet:pi,isFinite:function(t){return!li(t)&&In(t)&&!kn(parseFloat(t))},isNaN:gi,isBoolean:mi,isNull:function(t){return null===t},isUndefined:function(t){return void 0===t},has:function(t,e){if(!ei(e))return zn(t,e);for(var n=e.length,r=0;r<n;r++){var i=e[r];if(null==t||!wn.call(t,i))return!1;t=t[i]}return!!n},identity:yi,constant:function(t){return function(){return t}},noop:function(){},property:_i,propertyOf:function(t){return null==t?function(){}:function(e){return ei(e)?Fn(t,e):t[e]}},matcher:bi,matches:bi,times:function(t,e,n){var r=Array(Math.max(0,t));e=Tn(e,n,1);for(var i=0;i<t;i++)r[i]=e(i);return r},random:xi,now:wi,escape:ki,unescape:Ii,result:function(t,e,n){ei(e)||(e=[e]);var r=e.length;if(!r)return ii(n)?n.call(t):n;for(var i=0;i<r;i++){var s=null==t?void 0:t[e[i]];void 0===s&&(s=n,i=r),t=ii(s)?s.call(t):s}return t},uniqueId:function(t){var e=++Ai+"";return t?t+e:e},templateSettings:Oi,template:function(t,e,n){!e&&n&&(e=n),e=Xr({},e,On.templateSettings);var r,i=RegExp([(e.escape||Mi).source,(e.interpolate||Mi).source,(e.evaluate||Mi).source].join("|")+"|$","g"),s=0,o="__p+='";t.replace(i,(function(e,n,r,i,a){return o+=t.slice(s,a).replace(Ni,Ri),s=a+e.length,n?o+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?o+="'+\n((__t=("+r+"))==null?'':__t)+\n'":i&&(o+="';\n"+i+"\n__p+='"),e})),o+="';\n",e.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{r=new Function(e.variable||"obj","_",o)}catch(t){throw t.source=o,t}var a=function(t){return r.call(this,t,On)},u=e.variable||"obj";return a.source="function("+u+"){\n"+o+"}",a},chain:function(t){var e=On(t);return e._chain=!0,e},mixin:Hi}));$i._=$i;var Ci=dn((function(t,n){!function(t){var r,i="object"==typeof self&&self.self===self&&self||"object"==typeof fn&&fn.global===fn&&fn,s=$i;try{r=e}catch(t){}!function(t,e,n,r){var i=t.Backbone,s=Array.prototype.slice;e.VERSION="1.4.0",e.$=r,e.noConflict=function(){return t.Backbone=i,this},e.emulateHTTP=!1,e.emulateJSON=!1;var o,a=e.Events={},u=/\s+/,c=function(t,e,r,i,s){var o,a=0;if(r&&"object"==typeof r){void 0!==i&&"context"in s&&void 0===s.context&&(s.context=i);for(o=n.keys(r);a<o.length;a++)e=c(t,e,o[a],r[o[a]],s)}else if(r&&u.test(r))for(o=r.split(u);a<o.length;a++)e=t(e,o[a],i,s);else e=t(e,r,i,s);return e};a.on=function(t,e,n){(this._events=c(l,this._events||{},t,e,{context:n,ctx:this,listening:o}),o)&&((this._listeners||(this._listeners={}))[o.id]=o,o.interop=!1);return this},a.listenTo=function(t,e,r){if(!t)return this;var i=t._listenId||(t._listenId=n.uniqueId("l")),s=this._listeningTo||(this._listeningTo={}),a=o=s[i];a||(this._listenId||(this._listenId=n.uniqueId("l")),a=o=s[i]=new g(this,t));var u=h(t,e,r,this);if(o=void 0,u)throw u;return a.interop&&a.on(e,r),this};var l=function(t,e,n,r){if(n){var i=t[e]||(t[e]=[]),s=r.context,o=r.ctx,a=r.listening;a&&a.count++,i.push({callback:n,context:s,ctx:s||o,listening:a})}return t},h=function(t,e,n,r){try{t.on(e,n,r)}catch(t){return t}};a.off=function(t,e,n){return this._events?(this._events=c(f,this._events,t,e,{context:n,listeners:this._listeners}),this):this},a.stopListening=function(t,e,r){var i=this._listeningTo;if(!i)return this;for(var s=t?[t._listenId]:n.keys(i),o=0;o<s.length;o++){var a=i[s[o]];if(!a)break;a.obj.off(e,r,this),a.interop&&a.off(e,r)}return n.isEmpty(i)&&(this._listeningTo=void 0),this};var f=function(t,e,r,i){if(t){var s,o=i.context,a=i.listeners,u=0;if(e||o||r){for(s=e?[e]:n.keys(t);u<s.length;u++){var c=t[e=s[u]];if(!c)break;for(var l=[],h=0;h<c.length;h++){var f=c[h];if(r&&r!==f.callback&&r!==f.callback._callback||o&&o!==f.context)l.push(f);else{var d=f.listening;d&&d.off(e,r)}}l.length?t[e]=l:delete t[e]}return t}for(s=n.keys(a);u<s.length;u++)a[s[u]].cleanup()}};a.once=function(t,e,n){var r=c(d,{},t,e,this.off.bind(this));return"string"==typeof t&&null==n&&(e=void 0),this.on(r,e,n)},a.listenToOnce=function(t,e,n){var r=c(d,{},e,n,this.stopListening.bind(this,t));return this.listenTo(t,r)};var d=function(t,e,r,i){if(r){var s=t[e]=n.once((function(){i(e,s),r.apply(this,arguments)}));s._callback=r}return t};a.trigger=function(t){if(!this._events)return this;for(var e=Math.max(0,arguments.length-1),n=Array(e),r=0;r<e;r++)n[r]=arguments[r+1];return c(p,this._events,t,void 0,n),this};var p=function(t,e,n,r){if(t){var i=t[e],s=t.all;i&&s&&(s=s.slice()),i&&v(i,r),s&&v(s,[e].concat(r))}return t},v=function(t,e){var n,r=-1,i=t.length,s=e[0],o=e[1],a=e[2];switch(e.length){case 0:for(;++r<i;)(n=t[r]).callback.call(n.ctx);return;case 1:for(;++r<i;)(n=t[r]).callback.call(n.ctx,s);return;case 2:for(;++r<i;)(n=t[r]).callback.call(n.ctx,s,o);return;case 3:for(;++r<i;)(n=t[r]).callback.call(n.ctx,s,o,a);return;default:for(;++r<i;)(n=t[r]).callback.apply(n.ctx,e);return}},g=function(t,e){this.id=t._listenId,this.listener=t,this.obj=e,this.interop=!0,this.count=0,this._events=void 0};g.prototype.on=a.on,g.prototype.off=function(t,e){var n;this.interop?(this._events=c(f,this._events,t,e,{context:void 0,listeners:void 0}),n=!this._events):(this.count--,n=0===this.count),n&&this.cleanup()},g.prototype.cleanup=function(){delete this.listener._listeningTo[this.obj._listenId],this.interop||delete this.obj._listeners[this.id]},a.bind=a.on,a.unbind=a.off,n.extend(e,a);var m=e.Model=function(t,e){var r=t||{};e||(e={}),this.preinitialize.apply(this,arguments),this.cid=n.uniqueId(this.cidPrefix),this.attributes={},e.collection&&(this.collection=e.collection),e.parse&&(r=this.parse(r,e)||{});var i=n.result(this,"defaults");r=n.defaults(n.extend({},i,r),i),this.set(r,e),this.changed={},this.initialize.apply(this,arguments)};n.extend(m.prototype,a,{changed:null,validationError:null,idAttribute:"id",cidPrefix:"c",preinitialize:function(){},initialize:function(){},toJSON:function(t){return n.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return n.escape(this.get(t))},has:function(t){return null!=this.get(t)},matches:function(t){return!!n.iteratee(t,this)(this.attributes)},set:function(t,e,r){if(null==t)return this;var i;if("object"==typeof t?(i=t,r=e):(i={})[t]=e,r||(r={}),!this._validate(i,r))return!1;var s=r.unset,o=r.silent,a=[],u=this._changing;this._changing=!0,u||(this._previousAttributes=n.clone(this.attributes),this.changed={});var c=this.attributes,l=this.changed,h=this._previousAttributes;for(var f in i)e=i[f],n.isEqual(c[f],e)||a.push(f),n.isEqual(h[f],e)?delete l[f]:l[f]=e,s?delete c[f]:c[f]=e;if(this.idAttribute in i&&(this.id=this.get(this.idAttribute)),!o){a.length&&(this._pending=r);for(var d=0;d<a.length;d++)this.trigger("change:"+a[d],this,c[a[d]],r)}if(u)return this;if(!o)for(;this._pending;)r=this._pending,this._pending=!1,this.trigger("change",this,r);return this._pending=!1,this._changing=!1,this},unset:function(t,e){return this.set(t,void 0,n.extend({},e,{unset:!0}))},clear:function(t){var e={};for(var r in this.attributes)e[r]=void 0;return this.set(e,n.extend({},t,{unset:!0}))},hasChanged:function(t){return null==t?!n.isEmpty(this.changed):n.has(this.changed,t)},changedAttributes:function(t){if(!t)return!!this.hasChanged()&&n.clone(this.changed);var e,r=this._changing?this._previousAttributes:this.attributes,i={};for(var s in t){var o=t[s];n.isEqual(r[s],o)||(i[s]=o,e=!0)}return!!e&&i},previous:function(t){return null!=t&&this._previousAttributes?this._previousAttributes[t]:null},previousAttributes:function(){return n.clone(this._previousAttributes)},fetch:function(t){t=n.extend({parse:!0},t);var e=this,r=t.success;return t.success=function(n){var i=t.parse?e.parse(n,t):n;if(!e.set(i,t))return!1;r&&r.call(t.context,e,n,t),e.trigger("sync",e,n,t)},K(this,t),this.sync("read",this,t)},save:function(t,e,r){var i;null==t||"object"==typeof t?(i=t,r=e):(i={})[t]=e;var s=(r=n.extend({validate:!0,parse:!0},r)).wait;if(i&&!s){if(!this.set(i,r))return!1}else if(!this._validate(i,r))return!1;var o=this,a=r.success,u=this.attributes;r.success=function(t){o.attributes=u;var e=r.parse?o.parse(t,r):t;if(s&&(e=n.extend({},i,e)),e&&!o.set(e,r))return!1;a&&a.call(r.context,o,t,r),o.trigger("sync",o,t,r)},K(this,r),i&&s&&(this.attributes=n.extend({},u,i));var c=this.isNew()?"create":r.patch?"patch":"update";"patch"!==c||r.attrs||(r.attrs=i);var l=this.sync(c,this,r);return this.attributes=u,l},destroy:function(t){t=t?n.clone(t):{};var e=this,r=t.success,i=t.wait,s=function(){e.stopListening(),e.trigger("destroy",e,e.collection,t)};t.success=function(n){i&&s(),r&&r.call(t.context,e,n,t),e.isNew()||e.trigger("sync",e,n,t)};var o=!1;return this.isNew()?n.defer(t.success):(K(this,t),o=this.sync("delete",this,t)),i||s(),o},url:function(){var t=n.result(this,"urlRoot")||n.result(this.collection,"url")||V();if(this.isNew())return t;var e=this.get(this.idAttribute);return t.replace(/[^\/]$/,"$&/")+encodeURIComponent(e)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},n.extend({},t,{validate:!0}))},_validate:function(t,e){if(!e.validate||!this.validate)return!0;t=n.extend({},this.attributes,t);var r=this.validationError=this.validate(t,e)||null;return!r||(this.trigger("invalid",this,r,n.extend(e,{validationError:r})),!1)}});var y=e.Collection=function(t,e){e||(e={}),this.preinitialize.apply(this,arguments),e.model&&(this.model=e.model),void 0!==e.comparator&&(this.comparator=e.comparator),this._reset(),this.initialize.apply(this,arguments),t&&this.reset(t,n.extend({silent:!0},e))},_={add:!0,remove:!0,merge:!0},b={add:!0,remove:!1},x=function(t,e,n){n=Math.min(Math.max(n,0),t.length);var r,i=Array(t.length-n),s=e.length;for(r=0;r<i.length;r++)i[r]=t[r+n];for(r=0;r<s;r++)t[r+n]=e[r];for(r=0;r<i.length;r++)t[r+s+n]=i[r]};n.extend(y.prototype,a,{model:m,preinitialize:function(){},initialize:function(){},toJSON:function(t){return this.map((function(e){return e.toJSON(t)}))},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,n.extend({merge:!1},e,b))},remove:function(t,e){e=n.extend({},e);var r=!n.isArray(t);t=r?[t]:t.slice();var i=this._removeModels(t,e);return!e.silent&&i.length&&(e.changes={added:[],merged:[],removed:i},this.trigger("update",this,e)),r?i[0]:i},set:function(t,e){if(null!=t){(e=n.extend({},_,e)).parse&&!this._isModel(t)&&(t=this.parse(t,e)||[]);var r=!n.isArray(t);t=r?[t]:t.slice();var i=e.at;null!=i&&(i=+i),i>this.length&&(i=this.length),i<0&&(i+=this.length+1);var s,o,a=[],u=[],c=[],l=[],h={},f=e.add,d=e.merge,p=e.remove,v=!1,g=this.comparator&&null==i&&!1!==e.sort,m=n.isString(this.comparator)?this.comparator:null;for(o=0;o<t.length;o++){s=t[o];var y=this.get(s);if(y){if(d&&s!==y){var b=this._isModel(s)?s.attributes:s;e.parse&&(b=y.parse(b,e)),y.set(b,e),c.push(y),g&&!v&&(v=y.hasChanged(m))}h[y.cid]||(h[y.cid]=!0,a.push(y)),t[o]=y}else f&&(s=t[o]=this._prepareModel(s,e))&&(u.push(s),this._addReference(s,e),h[s.cid]=!0,a.push(s))}if(p){for(o=0;o<this.length;o++)h[(s=this.models[o]).cid]||l.push(s);l.length&&this._removeModels(l,e)}var w=!1,E=!g&&f&&p;if(a.length&&E?(w=this.length!==a.length||n.some(this.models,(function(t,e){return t!==a[e]})),this.models.length=0,x(this.models,a,0),this.length=this.models.length):u.length&&(g&&(v=!0),x(this.models,u,null==i?this.length:i),this.length=this.models.length),v&&this.sort({silent:!0}),!e.silent){for(o=0;o<u.length;o++)null!=i&&(e.index=i+o),(s=u[o]).trigger("add",s,this,e);(v||w)&&this.trigger("sort",this,e),(u.length||l.length||c.length)&&(e.changes={added:u,removed:l,merged:c},this.trigger("update",this,e))}return r?t[0]:t}},reset:function(t,e){e=e?n.clone(e):{};for(var r=0;r<this.models.length;r++)this._removeReference(this.models[r],e);return e.previousModels=this.models,this._reset(),t=this.add(t,n.extend({silent:!0},e)),e.silent||this.trigger("reset",this,e),t},push:function(t,e){return this.add(t,n.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);return this.remove(e,t)},unshift:function(t,e){return this.add(t,n.extend({at:0},e))},shift:function(t){var e=this.at(0);return this.remove(e,t)},slice:function(){return s.apply(this.models,arguments)},get:function(t){if(null!=t)return this._byId[t]||this._byId[this.modelId(this._isModel(t)?t.attributes:t)]||t.cid&&this._byId[t.cid]},has:function(t){return null!=this.get(t)},at:function(t){return t<0&&(t+=this.length),this.models[t]},where:function(t,e){return this[e?"find":"filter"](t)},findWhere:function(t){return this.where(t,!0)},sort:function(t){var e=this.comparator;if(!e)throw new Error("Cannot sort a set without a comparator");t||(t={});var r=e.length;return n.isFunction(e)&&(e=e.bind(this)),1===r||n.isString(e)?this.models=this.sortBy(e):this.models.sort(e),t.silent||this.trigger("sort",this,t),this},pluck:function(t){return this.map(t+"")},fetch:function(t){var e=(t=n.extend({parse:!0},t)).success,r=this;return t.success=function(n){var i=t.reset?"reset":"set";r[i](n,t),e&&e.call(t.context,r,n,t),r.trigger("sync",r,n,t)},K(this,t),this.sync("read",this,t)},create:function(t,e){var r=(e=e?n.clone(e):{}).wait;if(!(t=this._prepareModel(t,e)))return!1;r||this.add(t,e);var i=this,s=e.success;return e.success=function(t,e,n){r&&i.add(t,n),s&&s.call(n.context,t,e,n)},t.save(null,e),t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models,{model:this.model,comparator:this.comparator})},modelId:function(t){return t[this.model.prototype.idAttribute||"id"]},values:function(){return new E(this,S)},keys:function(){return new E(this,j)},entries:function(){return new E(this,k)},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(t,e){if(this._isModel(t))return t.collection||(t.collection=this),t;(e=e?n.clone(e):{}).collection=this;var r=new this.model(t,e);return r.validationError?(this.trigger("invalid",this,r.validationError,e),!1):r},_removeModels:function(t,e){for(var n=[],r=0;r<t.length;r++){var i=this.get(t[r]);if(i){var s=this.indexOf(i);this.models.splice(s,1),this.length--,delete this._byId[i.cid];var o=this.modelId(i.attributes);null!=o&&delete this._byId[o],e.silent||(e.index=s,i.trigger("remove",i,this,e)),n.push(i),this._removeReference(i,e)}}return n},_isModel:function(t){return t instanceof m},_addReference:function(t,e){this._byId[t.cid]=t;var n=this.modelId(t.attributes);null!=n&&(this._byId[n]=t),t.on("all",this._onModelEvent,this)},_removeReference:function(t,e){delete this._byId[t.cid];var n=this.modelId(t.attributes);null!=n&&delete this._byId[n],this===t.collection&&delete t.collection,t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,e,n,r){if(e){if(("add"===t||"remove"===t)&&n!==this)return;if("destroy"===t&&this.remove(e,r),"change"===t){var i=this.modelId(e.previousAttributes()),s=this.modelId(e.attributes);i!==s&&(null!=i&&delete this._byId[i],null!=s&&(this._byId[s]=e))}}this.trigger.apply(this,arguments)}});var w="function"==typeof Symbol&&Symbol.iterator;w&&(y.prototype[w]=y.prototype.values);var E=function(t,e){this._collection=t,this._kind=e,this._index=0},S=1,j=2,k=3;w&&(E.prototype[w]=function(){return this});E.prototype.next=function(){if(this._collection){if(this._index<this._collection.length){var t,e=this._collection.at(this._index);if(this._index++,this._kind===S)t=e;else{var n=this._collection.modelId(e.attributes);t=this._kind===j?n:[n,e]}return{value:t,done:!1}}this._collection=void 0}return{value:void 0,done:!0}};var I=e.View=function(t){this.cid=n.uniqueId("view"),this.preinitialize.apply(this,arguments),n.extend(this,n.pick(t,O)),this._ensureElement(),this.initialize.apply(this,arguments)},A=/^(\S+)\s*(.*)$/,O=["model","collection","el","id","attributes","className","tagName","events"];n.extend(I.prototype,a,{tagName:"div",$:function(t){return this.$el.find(t)},preinitialize:function(){},initialize:function(){},render:function(){return this},remove:function(){return this._removeElement(),this.stopListening(),this},_removeElement:function(){this.$el.remove()},setElement:function(t){return this.undelegateEvents(),this._setElement(t),this.delegateEvents(),this},_setElement:function(t){this.$el=t instanceof e.$?t:e.$(t),this.el=this.$el[0]},delegateEvents:function(t){if(t||(t=n.result(this,"events")),!t)return this;for(var e in this.undelegateEvents(),t){var r=t[e];if(n.isFunction(r)||(r=this[r]),r){var i=e.match(A);this.delegate(i[1],i[2],r.bind(this))}}return this},delegate:function(t,e,n){return this.$el.on(t+".delegateEvents"+this.cid,e,n),this},undelegateEvents:function(){return this.$el&&this.$el.off(".delegateEvents"+this.cid),this},undelegate:function(t,e,n){return this.$el.off(t+".delegateEvents"+this.cid,e,n),this},_createElement:function(t){return document.createElement(t)},_ensureElement:function(){if(this.el)this.setElement(n.result(this,"el"));else{var t=n.extend({},n.result(this,"attributes"));this.id&&(t.id=n.result(this,"id")),this.className&&(t.class=n.result(this,"className")),this.setElement(this._createElement(n.result(this,"tagName"))),this._setAttributes(t)}},_setAttributes:function(t){this.$el.attr(t)}});var M=function(t,e,n,r){switch(e){case 1:return function(){return t[n](this[r])};case 2:return function(e){return t[n](this[r],e)};case 3:return function(e,i){return t[n](this[r],N(e,this),i)};case 4:return function(e,i,s){return t[n](this[r],N(e,this),i,s)};default:return function(){var e=s.call(arguments);return e.unshift(this[r]),t[n].apply(t,e)}}},T=function(t,e,r,i){n.each(r,(function(n,r){e[r]&&(t.prototype[r]=M(e,n,r,i))}))},N=function(t,e){return n.isFunction(t)?t:n.isObject(t)&&!e._isModel(t)?R(t):n.isString(t)?function(e){return e.get(t)}:t},R=function(t){var e=n.matches(t);return function(t){return e(t.attributes)}},P={forEach:3,each:3,map:3,collect:3,reduce:0,foldl:0,inject:0,reduceRight:0,foldr:0,find:3,detect:3,filter:3,select:3,reject:3,every:3,all:3,some:3,any:3,include:3,includes:3,contains:3,invoke:0,max:3,min:3,toArray:1,size:1,first:3,head:3,take:3,initial:3,rest:3,tail:3,drop:3,last:3,without:0,difference:0,indexOf:3,shuffle:1,lastIndexOf:3,isEmpty:1,chain:1,sample:3,partition:3,groupBy:3,countBy:3,sortBy:3,indexBy:3,findIndex:3,findLastIndex:3},H={keys:1,values:1,pairs:1,invert:1,pick:0,omit:0,chain:1,isEmpty:1};n.each([[y,P,"models"],[m,H,"attributes"]],(function(t){var e=t[0],r=t[1],i=t[2];e.mixin=function(t){var r=n.reduce(n.functions(t),(function(t,e){return t[e]=0,t}),{});T(e,t,r,i)},T(e,n,r,i)})),e.sync=function(t,r,i){var s=$[t];n.defaults(i||(i={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var o={type:s,dataType:"json"};if(i.url||(o.url=n.result(r,"url")||V()),null!=i.data||!r||"create"!==t&&"update"!==t&&"patch"!==t||(o.contentType="application/json",o.data=JSON.stringify(i.attrs||r.toJSON(i))),i.emulateJSON&&(o.contentType="application/x-www-form-urlencoded",o.data=o.data?{model:o.data}:{}),i.emulateHTTP&&("PUT"===s||"DELETE"===s||"PATCH"===s)){o.type="POST",i.emulateJSON&&(o.data._method=s);var a=i.beforeSend;i.beforeSend=function(t){if(t.setRequestHeader("X-HTTP-Method-Override",s),a)return a.apply(this,arguments)}}"GET"===o.type||i.emulateJSON||(o.processData=!1);var u=i.error;i.error=function(t,e,n){i.textStatus=e,i.errorThrown=n,u&&u.call(i.context,t,e,n)};var c=i.xhr=e.ajax(n.extend(o,i));return r.trigger("request",r,c,i),c};var $={create:"POST",update:"PUT",patch:"PATCH",delete:"DELETE",read:"GET"};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var C=e.Router=function(t){t||(t={}),this.preinitialize.apply(this,arguments),t.routes&&(this.routes=t.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},z=/\((.*?)\)/g,F=/(\(\?)?:\w+/g,U=/\*\w+/g,B=/[\-{}\[\]+?.,\\\^$|#\s]/g;n.extend(C.prototype,a,{preinitialize:function(){},initialize:function(){},route:function(t,r,i){n.isRegExp(t)||(t=this._routeToRegExp(t)),n.isFunction(r)&&(i=r,r=""),i||(i=this[r]);var s=this;return e.history.route(t,(function(n){var o=s._extractParameters(t,n);!1!==s.execute(i,o,r)&&(s.trigger.apply(s,["route:"+r].concat(o)),s.trigger("route",r,o),e.history.trigger("route",s,r,o))})),this},execute:function(t,e,n){t&&t.apply(this,e)},navigate:function(t,n){return e.history.navigate(t,n),this},_bindRoutes:function(){if(this.routes){this.routes=n.result(this,"routes");for(var t,e=n.keys(this.routes);null!=(t=e.pop());)this.route(t,this.routes[t])}},_routeToRegExp:function(t){return t=t.replace(B,"\\$&").replace(z,"(?:$1)?").replace(F,(function(t,e){return e?t:"([^/?]+)"})).replace(U,"([^?]*?)"),new RegExp("^"+t+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(t,e){var r=t.exec(e).slice(1);return n.map(r,(function(t,e){return e===r.length-1?t||null:t?decodeURIComponent(t):null}))}});var q=e.History=function(){this.handlers=[],this.checkUrl=this.checkUrl.bind(this),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},L=/^[#\/]|\s+$/g,J=/^\/+|\/+$/g,W=/#.*$/;q.started=!1,n.extend(q.prototype,a,{interval:50,atRoot:function(){return this.location.pathname.replace(/[^\/]$/,"$&/")===this.root&&!this.getSearch()},matchRoot:function(){return this.decodeFragment(this.location.pathname).slice(0,this.root.length-1)+"/"===this.root},decodeFragment:function(t){return decodeURI(t.replace(/%25/g,"%2525"))},getSearch:function(){var t=this.location.href.replace(/#.*/,"").match(/\?.+/);return t?t[0]:""},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""},getPath:function(){var t=this.decodeFragment(this.location.pathname+this.getSearch()).slice(this.root.length-1);return"/"===t.charAt(0)?t.slice(1):t},getFragment:function(t){return null==t&&(t=this._usePushState||!this._wantsHashChange?this.getPath():this.getHash()),t.replace(L,"")},start:function(t){if(q.started)throw new Error("Backbone.history has already been started");if(q.started=!0,this.options=n.extend({root:"/"},this.options,t),this.root=this.options.root,this._wantsHashChange=!1!==this.options.hashChange,this._hasHashChange="onhashchange"in window&&(void 0===document.documentMode||document.documentMode>7),this._useHashChange=this._wantsHashChange&&this._hasHashChange,this._wantsPushState=!!this.options.pushState,this._hasPushState=!(!this.history||!this.history.pushState),this._usePushState=this._wantsPushState&&this._hasPushState,this.fragment=this.getFragment(),this.root=("/"+this.root+"/").replace(J,"/"),this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot()){var e=this.root.slice(0,-1)||"/";return this.location.replace(e+"#"+this.getPath()),!0}this._hasPushState&&this.atRoot()&&this.navigate(this.getHash(),{replace:!0})}if(!this._hasHashChange&&this._wantsHashChange&&!this._usePushState){this.iframe=document.createElement("iframe"),this.iframe.src="javascript:0",this.iframe.style.display="none",this.iframe.tabIndex=-1;var r=document.body,i=r.insertBefore(this.iframe,r.firstChild).contentWindow;i.document.open(),i.document.close(),i.location.hash="#"+this.fragment}var s=window.addEventListener||function(t,e){return attachEvent("on"+t,e)};if(this._usePushState?s("popstate",this.checkUrl,!1):this._useHashChange&&!this.iframe?s("hashchange",this.checkUrl,!1):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),!this.options.silent)return this.loadUrl()},stop:function(){var t=window.removeEventListener||function(t,e){return detachEvent("on"+t,e)};this._usePushState?t("popstate",this.checkUrl,!1):this._useHashChange&&!this.iframe&&t("hashchange",this.checkUrl,!1),this.iframe&&(document.body.removeChild(this.iframe),this.iframe=null),this._checkUrlInterval&&clearInterval(this._checkUrlInterval),q.started=!1},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();if(e===this.fragment&&this.iframe&&(e=this.getHash(this.iframe.contentWindow)),e===this.fragment)return!1;this.iframe&&this.navigate(e),this.loadUrl()},loadUrl:function(t){return!!this.matchRoot()&&(t=this.fragment=this.getFragment(t),n.some(this.handlers,(function(e){if(e.route.test(t))return e.callback(t),!0})))},navigate:function(t,e){if(!q.started)return!1;e&&!0!==e||(e={trigger:!!e}),t=this.getFragment(t||"");var n=this.root;""!==t&&"?"!==t.charAt(0)||(n=n.slice(0,-1)||"/");var r=n+t;t=t.replace(W,"");var i=this.decodeFragment(t);if(this.fragment!==i){if(this.fragment=i,this._usePushState)this.history[e.replace?"replaceState":"pushState"]({},document.title,r);else{if(!this._wantsHashChange)return this.location.assign(r);if(this._updateHash(this.location,t,e.replace),this.iframe&&t!==this.getHash(this.iframe.contentWindow)){var s=this.iframe.contentWindow;e.replace||(s.document.open(),s.document.close()),this._updateHash(s.location,t,e.replace)}}return e.trigger?this.loadUrl(t):void 0}},_updateHash:function(t,e,n){if(n){var r=t.href.replace(/(javascript:|#).*$/,"");t.replace(r+"#"+e)}else t.hash="#"+e}}),e.history=new q;var D=function(t,e){var r,i=this;return r=t&&n.has(t,"constructor")?t.constructor:function(){return i.apply(this,arguments)},n.extend(r,i,e),r.prototype=n.create(i.prototype,t),r.prototype.constructor=r,r.__super__=i.prototype,r};m.extend=y.extend=C.extend=I.extend=q.extend=D;var V=function(){throw new Error('A "url" property or function must be specified')},K=function(t,e){var n=e.error;e.error=function(r){n&&n.call(e.context,t,r,e),t.trigger("error",t,r,e)}}}(i,n,s,r)}()}));class zi{static _factory=[];static register(t){return t}static Subscribes(t){return t}static Observable(t){return t}static get(t){const e=$i.isNull(t)?null:zi._factory.find(e=>e.name===t);return e?e.instance:null}}var Fi=Object.assign(Ci,{Leviathan:{NAME:process.env.npm_package_name,VERSION:process.env.npm_package_version,...zi,Store:class{state=null;constructor(t){Object.assign(this,{state:t||null})}dispatch(t,...e){return this[t]&&$i.isFunction(this[t])&&this[t](...e),this}},View:class{_props={};_store=null;_events={};get props(){return this._props}get store(){return this._store}get events(){return this._events}constructor(t){Object.assign(this,{props:t||{}})}render(){return null}},DOM:class{static render(t,e){return"undefined"!=typeof window&&"undefined"!=typeof document&&e?this:""}}}});Ci.Leviathan.NAME,Ci.Leviathan.VERSION;exports.backbone=pn,exports.leviathan=Fi,exports.underscore=hn;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
